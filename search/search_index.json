{
    "docs": [
        {
            "location": "/",
            "text": "Toapi\n\uf0c1\n\n\nEvery web site provides APIs.\n\n\n\n\n\n\n\n\n\n\n\n\nOverview\n\uf0c1\n\n\nToapi is a \nclever\n, \nsimple\n and \nfast\n library letting any \nweb site provide APIs. In the past, we crawl data and storage them and create \napi service to share them maybe we should also update them regularly. \nThis library make things easy. The only thing you should do is defining your data, \nthey would be shared as api service automatically.\n\n\nGet Started\n\uf0c1\n\n\nInstallation\n\uf0c1\n\n\n$ pip install toapi\n$ toapi -v\ntoapi, version 0.1.12\n\n\n\n\n\nNew Project\n\uf0c1\n\n\n$ toapi new api\n2017/12/14 09:16:54 [New project] OK Creating project directory \"api\" \nCloning into 'api'...\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 10 (delta 1), reused 10 (delta 1), pack-reused 0\nUnpacking objects: 100% (10/10), done.\nChecking connectivity... done.\n2017/12/14 09:16:56 [New project] OK Success! \n\n     cd api\n     toapi run\n\n\n\n\n\nRun\n\uf0c1\n\n\nIn the directory of 'api' created above. Run the command line as follows.\n\n\n$ toapi run\n2017/12/14 09:27:18 [Serving ] OK http://127.0.0.1:5000\n\n\n\n\n\nThen, everything is done. Visit http://127.0.0.1:5000 in your browser!\n\n\nDeploy\n\uf0c1\n\n\nA Toapi app is a flask app. So you can deploy it as follows:\n\n\n\n\nWhile lightweight and easy to use, Flask\u2019s built-in server is not suitable for production as it doesn\u2019t scale well and by default serves only one request at a time. Some of the options available for properly running Flask in production are documented here.\n\n\nIf you want to deploy your Flask application to a WSGI server not listed here, look up the server documentation about how to use a WSGI app with it. Just remember that your Flask application object is the actual WSGI application.\n\n\n\n\nDeployment Options \u2014 Flask Documentation (0.12)\n\n\nScreenshots\n\uf0c1\n\n\nRunning Log\n\uf0c1\n\n\n\n\nRunning Items\n\uf0c1\n\n\n\n\nRunning Status\n\uf0c1\n\n\n\n\nRunning Results\n\uf0c1\n\n\n\n\nFeatures\n\uf0c1\n\n\nMultiple caching\n\uf0c1\n\n\nToapi use cache to prevent repeated parsing and use storage to prevent sending request.\n\n\nMultiple sites\n\uf0c1\n\n\nA toapi app has an ability to gather pages of multiple websites and convert them to easy to use APIs\n\n\nEasy to deploy.\n\uf0c1\n\n\nA toapi app is a standard flask app, so that you can deploy your app as deploying a flask app.\n\n\nStatus Monitor\n\uf0c1\n\n\nA toapi app will automatically count kinds of states of itself and you can visit the states whenever you want.\n\n\nGetting help\n\uf0c1\n\n\nTo get help with Toapi, please use the \nGitHub issues",
            "title": "Introduce"
        },
        {
            "location": "/#toapi",
            "text": "Every web site provides APIs.",
            "title": "Toapi"
        },
        {
            "location": "/#overview",
            "text": "Toapi is a  clever ,  simple  and  fast  library letting any \nweb site provide APIs. In the past, we crawl data and storage them and create \napi service to share them maybe we should also update them regularly. \nThis library make things easy. The only thing you should do is defining your data, \nthey would be shared as api service automatically.",
            "title": "Overview"
        },
        {
            "location": "/#get-started",
            "text": "",
            "title": "Get Started"
        },
        {
            "location": "/#installation",
            "text": "$ pip install toapi\n$ toapi -v\ntoapi, version 0.1.12",
            "title": "Installation"
        },
        {
            "location": "/#new-project",
            "text": "$ toapi new api\n2017/12/14 09:16:54 [New project] OK Creating project directory \"api\" \nCloning into 'api'...\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 10 (delta 1), reused 10 (delta 1), pack-reused 0\nUnpacking objects: 100% (10/10), done.\nChecking connectivity... done.\n2017/12/14 09:16:56 [New project] OK Success! \n\n     cd api\n     toapi run",
            "title": "New Project"
        },
        {
            "location": "/#run",
            "text": "In the directory of 'api' created above. Run the command line as follows.  $ toapi run\n2017/12/14 09:27:18 [Serving ] OK http://127.0.0.1:5000  Then, everything is done. Visit http://127.0.0.1:5000 in your browser!",
            "title": "Run"
        },
        {
            "location": "/#deploy",
            "text": "A Toapi app is a flask app. So you can deploy it as follows:   While lightweight and easy to use, Flask\u2019s built-in server is not suitable for production as it doesn\u2019t scale well and by default serves only one request at a time. Some of the options available for properly running Flask in production are documented here.  If you want to deploy your Flask application to a WSGI server not listed here, look up the server documentation about how to use a WSGI app with it. Just remember that your Flask application object is the actual WSGI application.   Deployment Options \u2014 Flask Documentation (0.12)",
            "title": "Deploy"
        },
        {
            "location": "/#screenshots",
            "text": "",
            "title": "Screenshots"
        },
        {
            "location": "/#running-log",
            "text": "",
            "title": "Running Log"
        },
        {
            "location": "/#running-items",
            "text": "",
            "title": "Running Items"
        },
        {
            "location": "/#running-status",
            "text": "",
            "title": "Running Status"
        },
        {
            "location": "/#running-results",
            "text": "",
            "title": "Running Results"
        },
        {
            "location": "/#features",
            "text": "",
            "title": "Features"
        },
        {
            "location": "/#multiple-caching",
            "text": "Toapi use cache to prevent repeated parsing and use storage to prevent sending request.",
            "title": "Multiple caching"
        },
        {
            "location": "/#multiple-sites",
            "text": "A toapi app has an ability to gather pages of multiple websites and convert them to easy to use APIs",
            "title": "Multiple sites"
        },
        {
            "location": "/#easy-to-deploy",
            "text": "A toapi app is a standard flask app, so that you can deploy your app as deploying a flask app.",
            "title": "Easy to deploy."
        },
        {
            "location": "/#status-monitor",
            "text": "A toapi app will automatically count kinds of states of itself and you can visit the states whenever you want.",
            "title": "Status Monitor"
        },
        {
            "location": "/#getting-help",
            "text": "To get help with Toapi, please use the  GitHub issues",
            "title": "Getting help"
        },
        {
            "location": "/about/installation/",
            "text": "Manual Installation\n\uf0c1\n\n\nIn order to manually install Toapi you'll need \nPython\n installed on your\nsystem, as well as the Python package manager, \npip\n. You can check if you have\nthese already installed from the command line:\n\n\n$ python --version\nPython 3.5.2\n$ pip --version\npip 9.0.1\n\n\n\n\n\nToapi supports Python3.5+.\n\n\nInstalling Python\n\uf0c1\n\n\nInstall \nPython\n by downloading an installer appropriate for your system from\n\npython.org\n and running it.\n\n\n\n\nNote\n\n\nIf you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).\n\n\n\n\nInstalling pip\n\uf0c1\n\n\nIf you're using a recent version of Python, the Python package manager, \npip\n,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:\n\n\npip install --upgrade pip\n\n\n\n\n\nIf you need to install \npip\n for the first time, download \nget-pip.py\n.\nThen run the following command to install it:\n\n\npython get-pip.py\n\n\n\n\n\nInstalling Toapi\n\uf0c1\n\n\nInstall the \ntoapi\n package using pip:\n\n\npip install toapi\n\n\n\n\n\nYou should now have the \ntoapi\n command installed on your system. Run \ntoapi\n--version\n to check that everything worked okay.\n\n\n$ toapi --version\ntoapi, version 1.0.0\n\n\n\n\n\n\n\nNote\n\n\nIf you are using Windows, some of the above commands may not work\nout-of-the-box.\n\n\nA quick solution may be to preface every Python command with \npython -m\n\nlike this:\n\n\npython -m pip install toapi\npython -m api\n\n\n\n\n\nFor a more permanent solution, you may need to edit your \nPATH\n environment\nvariable to include the \nScripts\n directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example \nC:\\Python34\\\n), open the\n\nTools\n, then \nScripts\n folder, and run the \nwin_add2path.py\n file by double\nclicking on it. Alternatively, you can \ndownload\n the script and run it\n(\npython win_add2path.py\n).",
            "title": "Installation"
        },
        {
            "location": "/about/installation/#manual-installation",
            "text": "In order to manually install Toapi you'll need  Python  installed on your\nsystem, as well as the Python package manager,  pip . You can check if you have\nthese already installed from the command line:  $ python --version\nPython 3.5.2\n$ pip --version\npip 9.0.1  Toapi supports Python3.5+.",
            "title": "Manual Installation"
        },
        {
            "location": "/about/installation/#installing-python",
            "text": "Install  Python  by downloading an installer appropriate for your system from python.org  and running it.   Note  If you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).",
            "title": "Installing Python"
        },
        {
            "location": "/about/installation/#installing-pip",
            "text": "If you're using a recent version of Python, the Python package manager,  pip ,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:  pip install --upgrade pip  If you need to install  pip  for the first time, download  get-pip.py .\nThen run the following command to install it:  python get-pip.py",
            "title": "Installing pip"
        },
        {
            "location": "/about/installation/#installing-toapi",
            "text": "Install the  toapi  package using pip:  pip install toapi  You should now have the  toapi  command installed on your system. Run  toapi\n--version  to check that everything worked okay.  $ toapi --version\ntoapi, version 1.0.0   Note  If you are using Windows, some of the above commands may not work\nout-of-the-box.  A quick solution may be to preface every Python command with  python -m \nlike this:  python -m pip install toapi\npython -m api  For a more permanent solution, you may need to edit your  PATH  environment\nvariable to include the  Scripts  directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example  C:\\Python34\\ ), open the Tools , then  Scripts  folder, and run the  win_add2path.py  file by double\nclicking on it. Alternatively, you can  download  the script and run it\n( python win_add2path.py ).",
            "title": "Installing Toapi"
        },
        {
            "location": "/about/release-notes/",
            "text": "Release Notes\n\uf0c1\n\n\n\n\nUpgrading\n\uf0c1\n\n\nTo upgrade Toapi to the latest version, use pip:\n\n\npip install -U toapi\n\n\n\n\n\nYou can determine your currently installed version using \ntoapi --version\n:\n\n\n$ toapi --version\ntoapi, version 1.0.0\n\n\n\n\n\nMaintenance team\n\uf0c1\n\n\n\n\n@gaojiuli\n\n\n@howie6879\n\n\n@wuqiangroy",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#upgrading",
            "text": "To upgrade Toapi to the latest version, use pip:  pip install -U toapi  You can determine your currently installed version using  toapi --version :  $ toapi --version\ntoapi, version 1.0.0",
            "title": "Upgrading"
        },
        {
            "location": "/about/release-notes/#maintenance-team",
            "text": "@gaojiuli  @howie6879  @wuqiangroy",
            "title": "Maintenance team"
        },
        {
            "location": "/about/contributing/",
            "text": "Contributing to Toapi\n\uf0c1\n\n\nAn introduction to contributing to the Toapi project.\n\n\nThe Toapi project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:\n\n\n\n\nCode patches via pull requests\n\n\nDocumentation improvements\n\n\nBug reports and patch reviews\n\n\n\n\nCode of Conduct\n\uf0c1\n\n\nEveryone interacting in the Toapi project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the \nPyPA Code of Conduct\n.\n\n\nReporting an Issue\n\uf0c1\n\n\nPlease include as much detail as you can. Let us know your platform and Toapi\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the full error and\ntraceback.\n\n\nInstalling for Development\n\uf0c1\n\n\nRun the following command. It is \nstrongly\n recommended that you do\nthis within a \nvirtualenv\n.\n\n\ngit clone https://github.com/gaojiuli/toapi\n\ncd\n toapi\npip install --editable .\n\n\n\n\n\nThis will install Toapi in development mode which binds the \ntoapi\n command\nto the git repository.\n\n\nRunning the tests\n\uf0c1\n\n\nTo run the tests, it is recommended that you use \npytest\n. This just needs\nto be pip installed and then the test suite can be ran for Toapi but running\nthe command \npytest\n in the root of your Toapi repository.\n\n\nIt will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by \nTravis\n when you submit a pull request.\n\n\nSubmitting Pull Requests\n\uf0c1\n\n\nOnce you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#contributing-to-toapi",
            "text": "An introduction to contributing to the Toapi project.  The Toapi project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:   Code patches via pull requests  Documentation improvements  Bug reports and patch reviews",
            "title": "Contributing to Toapi"
        },
        {
            "location": "/about/contributing/#code-of-conduct",
            "text": "Everyone interacting in the Toapi project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the  PyPA Code of Conduct .",
            "title": "Code of Conduct"
        },
        {
            "location": "/about/contributing/#reporting-an-issue",
            "text": "Please include as much detail as you can. Let us know your platform and Toapi\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the full error and\ntraceback.",
            "title": "Reporting an Issue"
        },
        {
            "location": "/about/contributing/#installing-for-development",
            "text": "Run the following command. It is  strongly  recommended that you do\nthis within a  virtualenv .  git clone https://github.com/gaojiuli/toapi cd  toapi\npip install --editable .  This will install Toapi in development mode which binds the  toapi  command\nto the git repository.",
            "title": "Installing for Development"
        },
        {
            "location": "/about/contributing/#running-the-tests",
            "text": "To run the tests, it is recommended that you use  pytest . This just needs\nto be pip installed and then the test suite can be ran for Toapi but running\nthe command  pytest  in the root of your Toapi repository.  It will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by  Travis  when you submit a pull request.",
            "title": "Running the tests"
        },
        {
            "location": "/about/contributing/#submitting-pull-requests",
            "text": "Once you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Submitting Pull Requests"
        },
        {
            "location": "/about/license/",
            "text": "Copyright 2017 Jiuli Gao\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "License"
        },
        {
            "location": "/tutorials/introducing/",
            "text": "",
            "title": "Introducing Aim"
        },
        {
            "location": "/tutorials/step0-creating-new-project/",
            "text": "",
            "title": "Step 0 Creating New Project"
        },
        {
            "location": "/tutorials/step1-global-settings/",
            "text": "",
            "title": "Step 1 Global Settings"
        },
        {
            "location": "/tutorials/step2-redis/",
            "text": "",
            "title": "Step 2 Using Redis"
        },
        {
            "location": "/tutorials/step3-mongodb/",
            "text": "",
            "title": "Step 3 Using Mongodb"
        },
        {
            "location": "/tutorials/step4-defining-items/",
            "text": "",
            "title": "Step 4 Defining Items"
        },
        {
            "location": "/tutorials/step5-packagin-apis/",
            "text": "",
            "title": "Step 5 Packaging The APIs"
        },
        {
            "location": "/tutorials/testing/",
            "text": "",
            "title": "Bonus: Testing the Application"
        },
        {
            "location": "/topics/api/",
            "text": "Api is the whole program entrance which connects items, cache, storage, \nhandles the request from user and fetches html from source sites. For \nexample:\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n,\n \nApi\n\n\n\napi\n \n=\n \nApi\n(\nbase_url\n=\n'https://news.ycombinator.com'\n)\n\n\n\n\nclass\n \nPost\n(\nItem\n):\n\n    \nurl\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//tr[@class=\"athing\"]'\n)\n\n        \nroute\n \n=\n \n'/'\n\n\n\n\napi\n.\nregister\n(\nPost\n)\n\n\napi\n.\nserve\n()\n\n\n\n\n\n\nArguments\n\uf0c1\n\n\nbase_url\n\uf0c1\n\n\nThe argument \nbase_url\n is hostname of source web site. \ndefault = None\n\n\nsettings\n\uf0c1\n\n\nThe argument \nsettings\n is the global configuration of the whole app. \ndefault = None\n means use default settings.\n\n\n\n\nMethods\n\uf0c1\n\n\n.register(self, item)\n\uf0c1\n\n\nRegister an item so that we could parse it.\n\n\n.serve(self, ip='127.0.0.1', port=5000, **options)\n\uf0c1\n\n\nStart to serve.\n\n\n.parse(self, path, params=None, **kwargs)\n\uf0c1\n\n\nParse items if the path is defined in registered items.\n\n\n.fetch_page_source(self, url, item, params=None, **kwargs)\n\uf0c1\n\n\nFetch html from an url.\n\n\n.get_browser(self, settings, item_with_ajax=False)\n\uf0c1\n\n\nInit a PhantomJS instance to the Api instance.\n\n\n.update_status(self, key)\n\uf0c1\n\n\nUpdate status of Api instance.\n\n\n.get_status(self, key)\n\uf0c1\n\n\nGet status of Api instance.\n\n\n.set_cache(self, key, value)\n\uf0c1\n\n\nSet cache. In Api instance, the value usually in type of \ndict\n.\n\n\n.get_cache(self, key)\n\uf0c1\n\n\nGet cache.\n\n\n.set_storage(self, key, value)\n\uf0c1\n\n\nSet storage.In Api instance, the value is usually a HTML.\n\n\n.get_storage(self, key)\n\uf0c1\n\n\nGet storage.\n\n\n.parse_item(self,  html, item)\n\uf0c1\n\n\nParse items from HTML.",
            "title": "Api"
        },
        {
            "location": "/topics/api/#arguments",
            "text": "",
            "title": "Arguments"
        },
        {
            "location": "/topics/api/#base_url",
            "text": "The argument  base_url  is hostname of source web site.  default = None",
            "title": "base_url"
        },
        {
            "location": "/topics/api/#settings",
            "text": "The argument  settings  is the global configuration of the whole app.  default = None  means use default settings.",
            "title": "settings"
        },
        {
            "location": "/topics/api/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/topics/api/#registerself-item",
            "text": "Register an item so that we could parse it.",
            "title": ".register(self, item)"
        },
        {
            "location": "/topics/api/#serveself-ip127001-port5000-options",
            "text": "Start to serve.",
            "title": ".serve(self, ip='127.0.0.1', port=5000, **options)"
        },
        {
            "location": "/topics/api/#parseself-path-paramsnone-kwargs",
            "text": "Parse items if the path is defined in registered items.",
            "title": ".parse(self, path, params=None, **kwargs)"
        },
        {
            "location": "/topics/api/#fetch_page_sourceself-url-item-paramsnone-kwargs",
            "text": "Fetch html from an url.",
            "title": ".fetch_page_source(self, url, item, params=None, **kwargs)"
        },
        {
            "location": "/topics/api/#get_browserself-settings-item_with_ajaxfalse",
            "text": "Init a PhantomJS instance to the Api instance.",
            "title": ".get_browser(self, settings, item_with_ajax=False)"
        },
        {
            "location": "/topics/api/#update_statusself-key",
            "text": "Update status of Api instance.",
            "title": ".update_status(self, key)"
        },
        {
            "location": "/topics/api/#get_statusself-key",
            "text": "Get status of Api instance.",
            "title": ".get_status(self, key)"
        },
        {
            "location": "/topics/api/#set_cacheself-key-value",
            "text": "Set cache. In Api instance, the value usually in type of  dict .",
            "title": ".set_cache(self, key, value)"
        },
        {
            "location": "/topics/api/#get_cacheself-key",
            "text": "Get cache.",
            "title": ".get_cache(self, key)"
        },
        {
            "location": "/topics/api/#set_storageself-key-value",
            "text": "Set storage.In Api instance, the value is usually a HTML.",
            "title": ".set_storage(self, key, value)"
        },
        {
            "location": "/topics/api/#get_storageself-key",
            "text": "Get storage.",
            "title": ".get_storage(self, key)"
        },
        {
            "location": "/topics/api/#parse_itemself-html-item",
            "text": "Parse items from HTML.",
            "title": ".parse_item(self,  html, item)"
        },
        {
            "location": "/topics/item/",
            "text": "Item is the key to the whole system which determine what is the result and\nwhere is the result. \n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n\n\n\nclass\n \nPost\n(\nItem\n):\n\n    \nurl\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//tr[@class=\"athing\"]'\n)\n\n        \nroute\n \n=\n \n'/'\n\n\n\n\n\n\nAs you can see. The fields of item are \nselector instances\n. \nAnd the Meta class determine the basic attributes of item.\n\n\n\n\nMeta.source: A section of a HTML, which should contains one complete item. It is a \nselector instance\n\n\nMeta.route: The url path regex expression of source site.",
            "title": "Item"
        },
        {
            "location": "/topics/selector/",
            "text": "Selector fields is used to parse field values from HTML. There are three selectors right now:\n\n\n\n\nXPath\n\n\nCss\n\n\nRegex\n\n\n\n\nCore arguments\n\uf0c1\n\n\nEach Selector field class constructor takes at least these arguments.  Some Field classes take additional, field-specific arguments, but the following should always be accepted:\n\n\nrule\n\uf0c1\n\n\nThe arguments \nrule\n is the rule of selector which maybe a xpath expression or a css select expression or a regex expression.\n\n\nXPath Selector\n\uf0c1\n\n\nThe rule argument is xpath expression.\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n\n\n\nfield\n \n=\n \nXPath\n(\n'//a[@class=\"user\"]/text()'\n)\n\n\n\n\n\n\nSignature:\n \nXPath(rule)\n\n\n\n\nCss Selector\n\uf0c1\n\n\nThe rule argument is css select expression.\n\n\nfrom\n \ntoapi\n \nimport\n \nCss\n\n\n\nfield\n \n=\n \nCss\n(\n'a.user'\n,\n \nattr\n=\n'href'\n)\n\n\n\n\n\n\nSignature:\n \nCss(rule, attr=None)\n\n\n\n\nattr\n Css select expression can't determine which part ot parse. We need the \nattr\n argument for that.\n\n\n\n\n\n\nRegex Selector\n\uf0c1\n\n\nThe rule argument regex expression.\n\n\nfrom\n \ntoapi\n \nimport\n \nRegex\n\n\n\nfield\n \n=\n \nRegex\n(\n'\\d{18}'\n)\n\n\n\n\n\n\nSignature:\n \nRegex(rule)",
            "title": "Selector"
        },
        {
            "location": "/topics/selector/#core-arguments",
            "text": "Each Selector field class constructor takes at least these arguments.  Some Field classes take additional, field-specific arguments, but the following should always be accepted:",
            "title": "Core arguments"
        },
        {
            "location": "/topics/selector/#rule",
            "text": "The arguments  rule  is the rule of selector which maybe a xpath expression or a css select expression or a regex expression.",
            "title": "rule"
        },
        {
            "location": "/topics/selector/#xpath-selector",
            "text": "The rule argument is xpath expression.  from   toapi   import   XPath  field   =   XPath ( '//a[@class=\"user\"]/text()' )   Signature:   XPath(rule)",
            "title": "XPath Selector"
        },
        {
            "location": "/topics/selector/#css-selector",
            "text": "The rule argument is css select expression.  from   toapi   import   Css  field   =   Css ( 'a.user' ,   attr = 'href' )   Signature:   Css(rule, attr=None)   attr  Css select expression can't determine which part ot parse. We need the  attr  argument for that.",
            "title": "Css Selector"
        },
        {
            "location": "/topics/selector/#regex-selector",
            "text": "The rule argument regex expression.  from   toapi   import   Regex  field   =   Regex ( '\\d{18}' )   Signature:   Regex(rule)",
            "title": "Regex Selector"
        },
        {
            "location": "/topics/settings/",
            "text": "Global settings.\n\n\nimport\n \nos\n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n,\n \nSettings\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nMemoryCache\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    \"\"\"\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \nos\n.\ngetcwd\n(),\n\n        \n\"DB_URL\"\n:\n \nNone\n\n    \n}\n\n    \ncache\n \n=\n \n{\n\n        \n# If you want to use other classes, just replace it\n\n        \n'cache_class'\n:\n \nMemoryCache\n,\n\n        \n'cache_config'\n:\n \n{},\n\n        \n# Default value is JsonSerializer\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nTrue\n,\n\n        \n\"request_config\"\n:\n \n{},\n\n        \n\"headers\"\n:\n \nNone\n\n    \n}\n\n\n\napi\n \n=\n \nApi\n(\n'https://www.github.com'\n,\n \nsettings\n=\nMySettings\n)\n\n\n\n\n\n\nAttributes\n\uf0c1\n\n\ncache\n\uf0c1\n\n\nConfig how the app perform \ncache\n. \n\n\nstorage\n\uf0c1\n\n\nConfig how the app perform \nstorage\n. \n\n\nweb\n\uf0c1\n\n\nConfig how the app perform request.",
            "title": "Settings"
        },
        {
            "location": "/topics/settings/#attributes",
            "text": "",
            "title": "Attributes"
        },
        {
            "location": "/topics/settings/#cache",
            "text": "Config how the app perform  cache .",
            "title": "cache"
        },
        {
            "location": "/topics/settings/#storage",
            "text": "Config how the app perform  storage .",
            "title": "storage"
        },
        {
            "location": "/topics/settings/#web",
            "text": "Config how the app perform request.",
            "title": "web"
        },
        {
            "location": "/topics/cache/",
            "text": "When you are writing a service, maybe you need to be able to save a piece of JSON data to your system's memory.\n\n\nThere are three ways to create a cache, using a MemoryCache, RedisCache or MemcachedCache.\n\n\nWhat is the difference between these three ways?\n\n\n\n\nMemoryCache\n: easy to configure, but it automatically destroys when the server is stopped.\n\n\nRedisCache\n: stable but you have to install Redis.\n\n\nMemcachedCache\n: stable but you have to install Memcached.\n\n\n\n\nThere are two serialization schemes we provide for you:\n\n\n\n\nJsonSerializer\n\n\nPickleSerializer\n\n\n\n\nCore arguments\n\uf0c1\n\n\nRedisCache\n and \nMemcachedCache\n class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:\n\n\n\n\nhost\n\n\nport\n\n\n\n\n\n\nNote\n\n\nMemoryCache\n can be instantiated directly\n\n\n\n\nUsage\n\uf0c1\n\n\nThese methods can be used with very convenient, first of all, you just need to add one new class which inheritance the \nToapi.Settings\n.\n\n\nLet's take a look at a quick example of using MemoryCache.Start off by adding the following to your \nsettings.py\n:\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nMemoryCache\n,\n \nRedisCache\n\n\n\n\nclass\n \nMyMemorySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    \"\"\"\n\n    \ncache\n \n=\n \n{\n\n        \n# If you want to use other classes, just replace it\n\n        \n'cache_class'\n:\n \nMemoryCache\n,\n\n        \n'cache_config'\n:\n \n{},\n\n        \n# Default value is JsonSerializer\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n\n\nclass\n \nMyRedisSettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    If you want to use Redis, you can create your configuration like this\n\n\n    \"\"\"\n\n    \ncache\n \n=\n \n{\n\n        \n# If you want to use other classes, just replace it\n\n        \n'cache_class'\n:\n \nRedisCache\n,\n\n        \n'cache_config'\n:\n \n{\n\n            \n'host'\n:\n \n'127.0.0.1'\n,\n\n            \n'port'\n:\n \n6379\n,\n\n            \n'db'\n:\n \n0\n,\n\n            \n'password'\n:\n \nNone\n\n        \n},\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n\n\n\n\n\nNext create \ncache_demo.py\n:\n\n\nfrom\n \ntoapi.cache\n \nimport\n \ncached\n,\n \nCacheSetting\n\n\n\nfrom\n \nsettings\n \nimport\n \nMyMemorySettings\n\n\n\n# Create a cache instance\n\n\n# Or cache_ins = CacheSetting(MyRedisSettings)\n\n\ncache_ins\n \n=\n \nCacheSetting\n(\nMyMemorySettings\n)\n\n\n\n# Set the value at key, the key will be automatically deleted after 10s\n\n\ncache_ins\n.\nset\n(\nkey\n=\n'name'\n,\n \nvalue\n=\n'toapi'\n,\n \nttl\n=\n10\n)\n\n\n\n# Return the value at key ``name``,\n\n\nvalue\n \n=\n \ncache_ins\n.\nget\n(\nkey\n=\n'name'\n)\n\n\n\n# Output\n\n\n# toapi\n\n\n\n\n\n\nOnce a cache instance has been created, you can use it anywhere to implement data caching.\n\n\nNow you know some of the basic operations for using cache_ins, but how can you add a cache to your API service?\n\n\nAdd the following to your \napp.py\n:\n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n\n\n\nfrom\n \nsettings\n \nimport\n \nMyMemorySettings\n\n\n\napi\n \n=\n \nApi\n(\n'https://www.github.com'\n,\n \nsettings\n=\nMyMemorySettings\n)\n\n\n\n\n\n\nHow It Works?\n\uf0c1\n\n\nThe \nApi\n class will initialize the \ncache\n attribute based on the value of settings.\n\n\n\n\nNote\n\n\nApi class can accept a parameter named settings, if settings is None, the default configuration will take effect\n\n\nYou can read the basic configuration from \ntoapi/settings.py",
            "title": "Cache"
        },
        {
            "location": "/topics/cache/#core-arguments",
            "text": "RedisCache  and  MemcachedCache  class constructor takes at least these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:   host  port    Note  MemoryCache  can be instantiated directly",
            "title": "Core arguments"
        },
        {
            "location": "/topics/cache/#usage",
            "text": "These methods can be used with very convenient, first of all, you just need to add one new class which inheritance the  Toapi.Settings .  Let's take a look at a quick example of using MemoryCache.Start off by adding the following to your  settings.py :  from   toapi.cache   import   MemoryCache ,   RedisCache  class   MyMemorySettings ( Settings ): \n     \"\"\"      Create custom configuration      \"\"\" \n     cache   =   { \n         # If you want to use other classes, just replace it \n         'cache_class' :   MemoryCache , \n         'cache_config' :   {}, \n         # Default value is JsonSerializer \n         'serializer' :   None , \n         'ttl' :   None \n     }  class   MyRedisSettings ( Settings ): \n     \"\"\"      If you want to use Redis, you can create your configuration like this      \"\"\" \n     cache   =   { \n         # If you want to use other classes, just replace it \n         'cache_class' :   RedisCache , \n         'cache_config' :   { \n             'host' :   '127.0.0.1' , \n             'port' :   6379 , \n             'db' :   0 , \n             'password' :   None \n         }, \n         'serializer' :   None , \n         'ttl' :   None \n     }   Next create  cache_demo.py :  from   toapi.cache   import   cached ,   CacheSetting  from   settings   import   MyMemorySettings  # Create a cache instance  # Or cache_ins = CacheSetting(MyRedisSettings)  cache_ins   =   CacheSetting ( MyMemorySettings )  # Set the value at key, the key will be automatically deleted after 10s  cache_ins . set ( key = 'name' ,   value = 'toapi' ,   ttl = 10 )  # Return the value at key ``name``,  value   =   cache_ins . get ( key = 'name' )  # Output  # toapi   Once a cache instance has been created, you can use it anywhere to implement data caching.  Now you know some of the basic operations for using cache_ins, but how can you add a cache to your API service?  Add the following to your  app.py :  from   toapi   import   Api  from   settings   import   MyMemorySettings  api   =   Api ( 'https://www.github.com' ,   settings = MyMemorySettings )",
            "title": "Usage"
        },
        {
            "location": "/topics/cache/#how-it-works",
            "text": "The  Api  class will initialize the  cache  attribute based on the value of settings.   Note  Api class can accept a parameter named settings, if settings is None, the default configuration will take effect  You can read the basic configuration from  toapi/settings.py",
            "title": "How It Works?"
        },
        {
            "location": "/topics/storage/",
            "text": "",
            "title": "Storage"
        }
    ]
}