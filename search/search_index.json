{
    "docs": [
        {
            "location": "/",
            "text": "Toapi\n\uf0c1\n\n\nEvery web site provides APIs.\n\n\n\n\n\n\n\n\n\n\nOverview\n\uf0c1\n\n\nToapi is a \nclever\n, \nsimple\n and \nfast\n library letting any \nweb site provide APIs. In the past, we crawl data and storage them and create \napi service to share them maybe we should also update them regularly. \nThis library make things easy. The only thing you should do is defining your data, \nthey would be shared as api service automatically.\n\n\nDocumentation: \nToapi Documentation\n\n\nCode Snippets:\n\uf0c1\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n,\n \nApi\n\n\nfrom\n \ntoapi\n \nimport\n \nSettings\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nFalse\n\n    \n}\n\n\n\napi\n \n=\n \nApi\n(\n'https://news.ycombinator.com/'\n,\n \nsettings\n=\nMySettings\n)\n\n\n\nclass\n \nPost\n(\nItem\n):\n\n    \nurl\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//tr[@class=\"athing\"]'\n)\n\n        \nroute\n \n=\n \n{\n'/news?page=:page'\n:\n'/news?p=:page'\n}\n\n\n\nclass\n \nPage\n(\nItem\n):\n\n    \nnext_page\n \n=\n \nXPath\n(\n'//a[@class=\"morelink\"]/@href'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nNone\n\n        \nroute\n \n=\n \n{\n'/news?page=:page'\n:\n'/news?p=:page'\n}\n\n\n    \ndef\n \nclean_next_page\n(\nself\n,\n \nnext_page\n):\n\n        \nreturn\n \n\"http://127.0.0.1:5000/\"\n \n+\n \nstr\n(\nnext_page\n)\n\n\n\napi\n.\nregister\n(\nPost\n)\n\n\napi\n.\nregister\n(\nPage\n)\n\n\n\napi\n.\nserve\n()\n\n\n\n# Visit: http://127.0.0.1:5000/_meta\n\n\n\n\n\n\nDiagram\n\uf0c1\n\n\n\n\n\n\n\n\nSending only one request to source web site with the same url.\n\n\nMost of the data fetched from cache and storage.\n\n\nGetting HTML from storage when the cache expired.\n\n\nGetting HTML from source site when the storage expired.\n\n\n\n\nGet Started\n\uf0c1\n\n\nInstallation\n\uf0c1\n\n\n$ pip install toapi\n$ toapi -v\ntoapi, version 0.1.12\n\n\n\n\n\nNew Project\n\uf0c1\n\n\n$ toapi new api\n2017/12/14 09:16:54 [New project] OK Creating project directory \"api\" \nCloning into 'api'...\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 10 (delta 1), reused 10 (delta 1), pack-reused 0\nUnpacking objects: 100% (10/10), done.\nChecking connectivity... done.\n2017/12/14 09:16:56 [New project] OK Success! \n\n     cd api\n     toapi run\n\n\n\n\n\nRun\n\uf0c1\n\n\nIn the directory of 'api' created above. Run the command line as follows.\n\n\n$ toapi run\n2017/12/14 09:27:18 [Serving ] OK http://127.0.0.1:5000\n\n\n\n\n\nThen, everything is done. Visit http://127.0.0.1:5000 in your browser!\n\n\nDeploy\n\uf0c1\n\n\nA Toapi app is a flask app. So you can deploy it as follows:\n\n\n\n\nWhile lightweight and easy to use, Flask\u2019s built-in server is not suitable for production as it doesn\u2019t scale well and by default serves only one request at a time. Some of the options available for properly running Flask in production are documented here.\n\n\nIf you want to deploy your Flask application to a WSGI server not listed here, look up the server documentation about how to use a WSGI app with it. Just remember that your Flask application object is the actual WSGI application.\n\n\n\n\nDeployment Options \u2014 Flask Documentation (0.12)\n\n\nScreenshots\n\uf0c1\n\n\ntoapi\n \nnew\n \ntoapi\n/\ntoapi\n-\npic\n\n\ncd\n \ntoapi\n-\npic\n\n\ntoapi\n \nrun\n\n\n\n\n\n\nRunning Log\n\uf0c1\n\n\n\n\nRunning Items\n\uf0c1\n\n\n\n\nhttp://127.0.0.1:5000/_items\n\n\n\n\n{\n\n    \n\"/pic/?q=:key\"\n:\n \n[\n\n        \n\"Pixabay\"\n,\n\n        \n\"Pexels\"\n\n    \n]\n\n\n}\n\n\n\n\n\n\nRunning Status\n\uf0c1\n\n\n\n\nhttp://127.0.0.1:5000/_status\n\n\n\n\n{\n\n    \n\"cache_get\"\n:\n \n2\n,\n\n    \n\"cache_set\"\n:\n \n2\n,\n\n    \n\"received\"\n:\n \n4\n,\n\n    \n\"sent\"\n:\n \n2\n,\n\n    \n\"storage_get\"\n:\n \n1\n,\n\n    \n\"storage_set\"\n:\n \n2\n\n\n}\n\n\n\n\n\n\nRunning Results\n\uf0c1\n\n\n\n\nhttp://127.0.0.1:5000/pic/?q=coffee\n\n\n\n\n{\n\n    \n\"Pixabay\"\n:\n \n[\n\n        \n{\n\n            \n\"img\"\n:\n \n\"https://cdn.pixabay.com/photo/2017/06/21/05/28/coffee-2426110__340.png\"\n\n        \n},\n\n        \n{\n\n            \n\"img\"\n:\n \n\"/static/img/blank.gif\"\n\n        \n}\n\n    \n],\n\n    \n\"Pexels\"\n:\n \n[\n\n        \n{\n\n            \n\"img\"\n:\n \n\"https://images.pexels.com/photos/302899/pexels-photo-302899.jpeg?h=350&auto=compress&cs=tinysrgb\"\n\n        \n},\n\n        \n{\n\n            \n\"img\"\n:\n \n\"https://images.pexels.com/photos/34085/pexels-photo.jpg?h=350&auto=compress&cs=tinysrgb\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nFeatures\n\uf0c1\n\n\nMultiple caching\n\uf0c1\n\n\nToapi use cache to prevent repeated parsing and use storage to prevent sending request.\n\n\nMultiple sites\n\uf0c1\n\n\nA toapi app has an ability to gather pages of multiple websites and convert them to easy to use APIs\n\n\nMultiple Templates & Applications\n\uf0c1\n\n\nAny application created by toapi could be shared to others.\n\n\nEasy to deploy.\n\uf0c1\n\n\nA toapi app is a standard flask app, so that you can deploy your app as deploying a flask app.\n\n\nStatus Monitor\n\uf0c1\n\n\nA toapi app will automatically count kinds of states of itself and you can visit the states whenever you want.\n\n\nGetting help\n\uf0c1\n\n\nTo get help with Toapi, please use the \nGitHub issues\n\n\nTodo\n\uf0c1\n\n\n\n\nChecking system every time running the app.",
            "title": "Introduce"
        },
        {
            "location": "/#toapi",
            "text": "Every web site provides APIs.",
            "title": "Toapi"
        },
        {
            "location": "/#overview",
            "text": "Toapi is a  clever ,  simple  and  fast  library letting any \nweb site provide APIs. In the past, we crawl data and storage them and create \napi service to share them maybe we should also update them regularly. \nThis library make things easy. The only thing you should do is defining your data, \nthey would be shared as api service automatically.  Documentation:  Toapi Documentation",
            "title": "Overview"
        },
        {
            "location": "/#code-snippets",
            "text": "from   toapi   import   XPath ,   Item ,   Api  from   toapi   import   Settings  class   MySettings ( Settings ): \n     web   =   { \n         \"with_ajax\" :   False \n     }  api   =   Api ( 'https://news.ycombinator.com/' ,   settings = MySettings )  class   Post ( Item ): \n     url   =   XPath ( '//a[@class=\"storylink\"]/@href' ) \n     title   =   XPath ( '//a[@class=\"storylink\"]/text()' ) \n\n     class   Meta : \n         source   =   XPath ( '//tr[@class=\"athing\"]' ) \n         route   =   { '/news?page=:page' : '/news?p=:page' }  class   Page ( Item ): \n     next_page   =   XPath ( '//a[@class=\"morelink\"]/@href' ) \n\n     class   Meta : \n         source   =   None \n         route   =   { '/news?page=:page' : '/news?p=:page' } \n\n     def   clean_next_page ( self ,   next_page ): \n         return   \"http://127.0.0.1:5000/\"   +   str ( next_page )  api . register ( Post )  api . register ( Page )  api . serve ()  # Visit: http://127.0.0.1:5000/_meta",
            "title": "Code Snippets:"
        },
        {
            "location": "/#diagram",
            "text": "Sending only one request to source web site with the same url.  Most of the data fetched from cache and storage.  Getting HTML from storage when the cache expired.  Getting HTML from source site when the storage expired.",
            "title": "Diagram"
        },
        {
            "location": "/#get-started",
            "text": "",
            "title": "Get Started"
        },
        {
            "location": "/#installation",
            "text": "$ pip install toapi\n$ toapi -v\ntoapi, version 0.1.12",
            "title": "Installation"
        },
        {
            "location": "/#new-project",
            "text": "$ toapi new api\n2017/12/14 09:16:54 [New project] OK Creating project directory \"api\" \nCloning into 'api'...\nremote: Counting objects: 10, done.\nremote: Compressing objects: 100% (8/8), done.\nremote: Total 10 (delta 1), reused 10 (delta 1), pack-reused 0\nUnpacking objects: 100% (10/10), done.\nChecking connectivity... done.\n2017/12/14 09:16:56 [New project] OK Success! \n\n     cd api\n     toapi run",
            "title": "New Project"
        },
        {
            "location": "/#run",
            "text": "In the directory of 'api' created above. Run the command line as follows.  $ toapi run\n2017/12/14 09:27:18 [Serving ] OK http://127.0.0.1:5000  Then, everything is done. Visit http://127.0.0.1:5000 in your browser!",
            "title": "Run"
        },
        {
            "location": "/#deploy",
            "text": "A Toapi app is a flask app. So you can deploy it as follows:   While lightweight and easy to use, Flask\u2019s built-in server is not suitable for production as it doesn\u2019t scale well and by default serves only one request at a time. Some of the options available for properly running Flask in production are documented here.  If you want to deploy your Flask application to a WSGI server not listed here, look up the server documentation about how to use a WSGI app with it. Just remember that your Flask application object is the actual WSGI application.   Deployment Options \u2014 Flask Documentation (0.12)",
            "title": "Deploy"
        },
        {
            "location": "/#screenshots",
            "text": "toapi   new   toapi / toapi - pic  cd   toapi - pic  toapi   run",
            "title": "Screenshots"
        },
        {
            "location": "/#running-log",
            "text": "",
            "title": "Running Log"
        },
        {
            "location": "/#running-items",
            "text": "http://127.0.0.1:5000/_items   { \n     \"/pic/?q=:key\" :   [ \n         \"Pixabay\" , \n         \"Pexels\" \n     ]  }",
            "title": "Running Items"
        },
        {
            "location": "/#running-status",
            "text": "http://127.0.0.1:5000/_status   { \n     \"cache_get\" :   2 , \n     \"cache_set\" :   2 , \n     \"received\" :   4 , \n     \"sent\" :   2 , \n     \"storage_get\" :   1 , \n     \"storage_set\" :   2  }",
            "title": "Running Status"
        },
        {
            "location": "/#running-results",
            "text": "http://127.0.0.1:5000/pic/?q=coffee   { \n     \"Pixabay\" :   [ \n         { \n             \"img\" :   \"https://cdn.pixabay.com/photo/2017/06/21/05/28/coffee-2426110__340.png\" \n         }, \n         { \n             \"img\" :   \"/static/img/blank.gif\" \n         } \n     ], \n     \"Pexels\" :   [ \n         { \n             \"img\" :   \"https://images.pexels.com/photos/302899/pexels-photo-302899.jpeg?h=350&auto=compress&cs=tinysrgb\" \n         }, \n         { \n             \"img\" :   \"https://images.pexels.com/photos/34085/pexels-photo.jpg?h=350&auto=compress&cs=tinysrgb\" \n         } \n     ]  }",
            "title": "Running Results"
        },
        {
            "location": "/#features",
            "text": "",
            "title": "Features"
        },
        {
            "location": "/#multiple-caching",
            "text": "Toapi use cache to prevent repeated parsing and use storage to prevent sending request.",
            "title": "Multiple caching"
        },
        {
            "location": "/#multiple-sites",
            "text": "A toapi app has an ability to gather pages of multiple websites and convert them to easy to use APIs",
            "title": "Multiple sites"
        },
        {
            "location": "/#multiple-templates-applications",
            "text": "Any application created by toapi could be shared to others.",
            "title": "Multiple Templates &amp; Applications"
        },
        {
            "location": "/#easy-to-deploy",
            "text": "A toapi app is a standard flask app, so that you can deploy your app as deploying a flask app.",
            "title": "Easy to deploy."
        },
        {
            "location": "/#status-monitor",
            "text": "A toapi app will automatically count kinds of states of itself and you can visit the states whenever you want.",
            "title": "Status Monitor"
        },
        {
            "location": "/#getting-help",
            "text": "To get help with Toapi, please use the  GitHub issues",
            "title": "Getting help"
        },
        {
            "location": "/#todo",
            "text": "Checking system every time running the app.",
            "title": "Todo"
        },
        {
            "location": "/about/installation/",
            "text": "Manual Installation\n\uf0c1\n\n\nIn order to manually install Toapi you'll need \nPython\n installed on your\nsystem, as well as the Python package manager, \npip\n. You can check if you have\nthese already installed from the command line:\n\n\n$ python --version\nPython 3.5.2\n$ pip --version\npip 9.0.1\n\n\n\n\n\nToapi supports Python3.5+.\n\n\nInstalling Python\n\uf0c1\n\n\nInstall \nPython\n by downloading an installer appropriate for your system from\n\npython.org\n and running it.\n\n\n\n\nNote\n\n\nIf you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).\n\n\n\n\nInstalling pip\n\uf0c1\n\n\nIf you're using a recent version of Python, the Python package manager, \npip\n,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:\n\n\npip install --upgrade pip\n\n\n\n\n\nIf you need to install \npip\n for the first time, download \nget-pip.py\n.\nThen run the following command to install it:\n\n\npython get-pip.py\n\n\n\n\n\nInstalling Toapi\n\uf0c1\n\n\nInstall the \ntoapi\n package using pip:\n\n\npip install toapi\n\n\n\n\n\nYou should now have the \ntoapi\n command installed on your system. Run \ntoapi\n--version\n to check that everything worked okay.\n\n\n$ toapi --version\ntoapi, version 1.0.0\n\n\n\n\n\n\n\nNote\n\n\nIf you are using Windows, some of the above commands may not work\nout-of-the-box.\n\n\nA quick solution may be to preface every Python command with \npython -m\n\nlike this:\n\n\npython -m pip install toapi\npython -m api\n\n\n\n\n\nFor a more permanent solution, you may need to edit your \nPATH\n environment\nvariable to include the \nScripts\n directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example \nC:\\Python34\\\n), open the\n\nTools\n, then \nScripts\n folder, and run the \nwin_add2path.py\n file by double\nclicking on it. Alternatively, you can \ndownload\n the script and run it\n(\npython win_add2path.py\n).",
            "title": "Installation"
        },
        {
            "location": "/about/installation/#manual-installation",
            "text": "In order to manually install Toapi you'll need  Python  installed on your\nsystem, as well as the Python package manager,  pip . You can check if you have\nthese already installed from the command line:  $ python --version\nPython 3.5.2\n$ pip --version\npip 9.0.1  Toapi supports Python3.5+.",
            "title": "Manual Installation"
        },
        {
            "location": "/about/installation/#installing-python",
            "text": "Install  Python  by downloading an installer appropriate for your system from python.org  and running it.   Note  If you are installing Python on Windows, be sure to check the box to have\nPython added to your PATH if the installer offers such an option (it's\nnormally off by default).",
            "title": "Installing Python"
        },
        {
            "location": "/about/installation/#installing-pip",
            "text": "If you're using a recent version of Python, the Python package manager,  pip ,\nis most likely installed by default. However, you may need to upgrade pip to the\nlasted version:  pip install --upgrade pip  If you need to install  pip  for the first time, download  get-pip.py .\nThen run the following command to install it:  python get-pip.py",
            "title": "Installing pip"
        },
        {
            "location": "/about/installation/#installing-toapi",
            "text": "Install the  toapi  package using pip:  pip install toapi  You should now have the  toapi  command installed on your system. Run  toapi\n--version  to check that everything worked okay.  $ toapi --version\ntoapi, version 1.0.0   Note  If you are using Windows, some of the above commands may not work\nout-of-the-box.  A quick solution may be to preface every Python command with  python -m \nlike this:  python -m pip install toapi\npython -m api  For a more permanent solution, you may need to edit your  PATH  environment\nvariable to include the  Scripts  directory of your Python installation.\nRecent versions of Python include a script to do this for you. Navigate to\nyour Python installation directory (for example  C:\\Python34\\ ), open the Tools , then  Scripts  folder, and run the  win_add2path.py  file by double\nclicking on it. Alternatively, you can  download  the script and run it\n( python win_add2path.py ).",
            "title": "Installing Toapi"
        },
        {
            "location": "/about/release-notes/",
            "text": "Release Notes\n\uf0c1\n\n\n\n\nUpgrading\n\uf0c1\n\n\nTo upgrade Toapi to the latest version, use pip:\n\n\npip install -U toapi\n\n\n\n\n\nYou can determine your currently installed version using \ntoapi --version\n:\n\n\n$ toapi --version\ntoapi, version 1.0.0\n\n\n\n\n\nMaintenance team\n\uf0c1\n\n\n\n\n@gaojiuli\n\n\n@howie6879\n\n\n@wuqiangroy\n\n\n\n\nChangelog\n\uf0c1\n\n\n1.0.0 (2017-12-26)\n\uf0c1\n\n\n\n\nInitial release",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#release-notes",
            "text": "",
            "title": "Release Notes"
        },
        {
            "location": "/about/release-notes/#upgrading",
            "text": "To upgrade Toapi to the latest version, use pip:  pip install -U toapi  You can determine your currently installed version using  toapi --version :  $ toapi --version\ntoapi, version 1.0.0",
            "title": "Upgrading"
        },
        {
            "location": "/about/release-notes/#maintenance-team",
            "text": "@gaojiuli  @howie6879  @wuqiangroy",
            "title": "Maintenance team"
        },
        {
            "location": "/about/release-notes/#changelog",
            "text": "",
            "title": "Changelog"
        },
        {
            "location": "/about/release-notes/#100-2017-12-26",
            "text": "Initial release",
            "title": "1.0.0 (2017-12-26)"
        },
        {
            "location": "/about/contributing/",
            "text": "Contributing to Toapi\n\uf0c1\n\n\nAn introduction to contributing to the Toapi project.\n\n\nThe Toapi project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:\n\n\n\n\nCode patches via pull requests\n\n\nDocumentation improvements\n\n\nBug reports and patch reviews\n\n\n\n\nDonate\n\uf0c1\n\n\nBTC(0.005)\n\n\nCode of Conduct\n\uf0c1\n\n\nEveryone interacting in the Toapi project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the \nPyPA Code of Conduct\n.\n\n\nReporting an Issue\n\uf0c1\n\n\nPlease include as much detail as you can. Let us know your platform and Toapi\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the full error and\ntraceback.\n\n\nInstalling for Development\n\uf0c1\n\n\nRun the following command. It is \nstrongly\n recommended that you do\nthis within a \nvirtualenv\n.\n\n\ngit clone https://github.com/gaojiuli/toapi\n\ncd\n toapi\npip install --editable .\n\n\n\n\n\nThis will install Toapi in development mode which binds the \ntoapi\n command\nto the git repository.\n\n\nRunning the tests\n\uf0c1\n\n\nTo run the tests, it is recommended that you use \npytest\n. This just needs\nto be pip installed and then the test suite can be ran for Toapi but running\nthe command \npytest\n in the root of your Toapi repository.\n\n\nIt will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by \nTravis\n when you submit a pull request.\n\n\nSubmitting Pull Requests\n\uf0c1\n\n\nOnce you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Contributing"
        },
        {
            "location": "/about/contributing/#contributing-to-toapi",
            "text": "An introduction to contributing to the Toapi project.  The Toapi project welcomes, and depends, on contributions from developers and\nusers in the open source community. Contributions can be made in a number of\nways, a few examples are:   Code patches via pull requests  Documentation improvements  Bug reports and patch reviews",
            "title": "Contributing to Toapi"
        },
        {
            "location": "/about/contributing/#donate",
            "text": "BTC(0.005)",
            "title": "Donate"
        },
        {
            "location": "/about/contributing/#code-of-conduct",
            "text": "Everyone interacting in the Toapi project's codebases, issue trackers, chat\nrooms, and mailing lists is expected to follow the  PyPA Code of Conduct .",
            "title": "Code of Conduct"
        },
        {
            "location": "/about/contributing/#reporting-an-issue",
            "text": "Please include as much detail as you can. Let us know your platform and Toapi\nversion. If the problem is visual (for example a theme or design issue) please\nadd a screenshot and if you get an error please include the full error and\ntraceback.",
            "title": "Reporting an Issue"
        },
        {
            "location": "/about/contributing/#installing-for-development",
            "text": "Run the following command. It is  strongly  recommended that you do\nthis within a  virtualenv .  git clone https://github.com/gaojiuli/toapi cd  toapi\npip install --editable .  This will install Toapi in development mode which binds the  toapi  command\nto the git repository.",
            "title": "Installing for Development"
        },
        {
            "location": "/about/contributing/#running-the-tests",
            "text": "To run the tests, it is recommended that you use  pytest . This just needs\nto be pip installed and then the test suite can be ran for Toapi but running\nthe command  pytest  in the root of your Toapi repository.  It will attempt to run the tests against all of the Python versions we\nsupport. So don't be concerned if you are missing some and they fail. The rest\nwill be verified by  Travis  when you submit a pull request.",
            "title": "Running the tests"
        },
        {
            "location": "/about/contributing/#submitting-pull-requests",
            "text": "Once you are happy with your changes or you are ready for some feedback, push\nit to your fork and send a pull request. For a change to be accepted it will\nmost likely need to have tests and documentation if it is a new feature.",
            "title": "Submitting Pull Requests"
        },
        {
            "location": "/about/license/",
            "text": "Copyright 2017 Jiuli Gao\n\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\n\n\n\n\nUnless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.",
            "title": "License"
        },
        {
            "location": "/tutorials/introducing/",
            "text": "Aim\n\uf0c1\n\n\nOur aim is to build an api server that provides free pictures. Those pictures are fetched from those websites:\n\n\n\n\nhttps://pixabay.com/\n\n\nhttps://www.pexels.com/\n\n\n\n\nYou can find the source code in \nexamples/toapi-pic\n\n\nWhat it look like?\n\uf0c1\n\n\nRunning\n\uf0c1\n\n\n\n\nIndex\n\uf0c1\n\n\n\n\nItems\n\uf0c1\n\n\n\n\nResults\n\uf0c1",
            "title": "Introducing Aim"
        },
        {
            "location": "/tutorials/introducing/#aim",
            "text": "Our aim is to build an api server that provides free pictures. Those pictures are fetched from those websites:   https://pixabay.com/  https://www.pexels.com/   You can find the source code in  examples/toapi-pic",
            "title": "Aim"
        },
        {
            "location": "/tutorials/introducing/#what-it-look-like",
            "text": "",
            "title": "What it look like?"
        },
        {
            "location": "/tutorials/introducing/#running",
            "text": "",
            "title": "Running"
        },
        {
            "location": "/tutorials/introducing/#index",
            "text": "",
            "title": "Index"
        },
        {
            "location": "/tutorials/introducing/#items",
            "text": "",
            "title": "Items"
        },
        {
            "location": "/tutorials/introducing/#results",
            "text": "",
            "title": "Results"
        },
        {
            "location": "/tutorials/step0-creating-new-project/",
            "text": "New Project\n\uf0c1\n\n\nYou can run the command 'toapi new' whenever you want to start a new api server.\n\n\n$ toapi new toapi/toapi-pic\n2017/12/26 11:41:38 [New project] OK Creating project directory \"toapi-pic\" \nCloning into 'toapi-pic'...\nremote: Counting objects: 13, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 13 (delta 2), reused 9 (delta 1), pack-reused 0\nUnpacking objects: 100% (13/13), done.\nChecking connectivity... done.\n2017/12/26 11:41:40 [New project] OK Success! \n\n     cd toapi-pic\n     toapi run\n\n\n\n\n\nThis command create a new folder named \ntoapi-pic\n, which include some files:\n\n\n$ tree .                   \n.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 items\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pexels.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pixabay.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 settings.py\n\u2514\u2500\u2500 wsgi.py\n\n1 directory, 7 files\n\n\n\n\n\n\n\napp.py: define the app instance.\n\n\nsettings.py: global configs.\n\n\nitems: define items you want to extract.\n\n\nwsgi.py: expose interface to gunicorn, uwsgi .etc for serving.",
            "title": "Step 0 Creating New Project"
        },
        {
            "location": "/tutorials/step0-creating-new-project/#new-project",
            "text": "You can run the command 'toapi new' whenever you want to start a new api server.  $ toapi new toapi/toapi-pic\n2017/12/26 11:41:38 [New project] OK Creating project directory \"toapi-pic\" \nCloning into 'toapi-pic'...\nremote: Counting objects: 13, done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 13 (delta 2), reused 9 (delta 1), pack-reused 0\nUnpacking objects: 100% (13/13), done.\nChecking connectivity... done.\n2017/12/26 11:41:40 [New project] OK Success! \n\n     cd toapi-pic\n     toapi run  This command create a new folder named  toapi-pic , which include some files:  $ tree .                   \n.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 items\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pexels.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 pixabay.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 settings.py\n\u2514\u2500\u2500 wsgi.py\n\n1 directory, 7 files   app.py: define the app instance.  settings.py: global configs.  items: define items you want to extract.  wsgi.py: expose interface to gunicorn, uwsgi .etc for serving.",
            "title": "New Project"
        },
        {
            "location": "/tutorials/step1-global-settings/",
            "text": "Settings\n\uf0c1\n\n\nSettings allow you config cache, storage, request. In our toapi-pic project.\nYou could see the code:\n\n\nimport\n \nos\n\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nMemoryCache\n\n\nfrom\n \ntoapi.settings\n \nimport\n \nSettings\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    http://www.toapi.org/topics/settings/\n\n\n    \"\"\"\n\n\n    \ncache\n \n=\n \n{\n\n        \n'cache_class'\n:\n \nMemoryCache\n,\n\n        \n'cache_config'\n:\n \n{},\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \nos\n.\ngetcwd\n(),\n\n        \n\"DB_URL\"\n:\n \nNone\n\n    \n}\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nFalse\n,\n\n        \n\"request_config\"\n:\n \n{},\n\n        \n\"headers\"\n:\n \nNone\n\n    \n}\n\n\n\n\n\n\n\n\ncache: config what kind of cache you use. Default is memory cache\n\n\nstorage: config what kind of storage you use. Default is local file storage.\n\n\nweb: config the request headers and if using ajax. Default without ajax.\n\n\n\n\nYou can find more detail describe for theme in \ntopics",
            "title": "Step 1 Global Settings"
        },
        {
            "location": "/tutorials/step1-global-settings/#settings",
            "text": "Settings allow you config cache, storage, request. In our toapi-pic project.\nYou could see the code:  import   os  from   toapi.cache   import   MemoryCache  from   toapi.settings   import   Settings  class   MySettings ( Settings ): \n     \"\"\"      Create custom configuration      http://www.toapi.org/topics/settings/      \"\"\" \n\n     cache   =   { \n         'cache_class' :   MemoryCache , \n         'cache_config' :   {}, \n         'serializer' :   None , \n         'ttl' :   None \n     } \n     storage   =   { \n         \"PATH\" :   os . getcwd (), \n         \"DB_URL\" :   None \n     } \n     web   =   { \n         \"with_ajax\" :   False , \n         \"request_config\" :   {}, \n         \"headers\" :   None \n     }    cache: config what kind of cache you use. Default is memory cache  storage: config what kind of storage you use. Default is local file storage.  web: config the request headers and if using ajax. Default without ajax.   You can find more detail describe for theme in  topics",
            "title": "Settings"
        },
        {
            "location": "/tutorials/step2-redis/",
            "text": "Prepare redis\n\uf0c1\n\n\n$ redis-cli -v                      \nredis-cli 3.0.6\n\n\n\n\n\nIf you don't have redis, you need to install it.\n\n\nSetting\n\uf0c1\n\n\nEdit the \nsettings.py\n, change it to:\n\n\nimport\n \nos\n\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nRedisCache\n,\n \nJsonSerializer\n\n\nfrom\n \ntoapi.settings\n \nimport\n \nSettings\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    http://www.toapi.org/topics/settings/\n\n\n    \"\"\"\n\n\n    \ncache\n \n=\n \n{\n\n        \n'cache_class'\n:\n \nRedisCache\n,\n\n        \n'cache_config'\n:\n \n{\n\n            \n'host'\n:\n \n'127.0.0.1'\n,\n\n            \n'port'\n:\n \n6379\n,\n\n            \n'db'\n:\n \n0\n\n        \n},\n\n        \n'serializer'\n:\n \nJsonSerializer\n,\n\n        \n'ttl'\n:\n \n10000\n\n    \n}\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \nos\n.\ngetcwd\n(),\n\n        \n\"DB_URL\"\n:\n \nNone\n\n    \n}\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nFalse\n,\n\n        \n\"request_config\"\n:\n \n{},\n\n        \n\"headers\"\n:\n \nNone\n\n    \n}\n\n\n\n\n\n\nTry to run command \ntoapi run\n. If it works, you do good job. \nIf something wrong, please check the redis and the redis library for python.",
            "title": "Step 2 Using Redis"
        },
        {
            "location": "/tutorials/step2-redis/#prepare-redis",
            "text": "$ redis-cli -v                      \nredis-cli 3.0.6  If you don't have redis, you need to install it.",
            "title": "Prepare redis"
        },
        {
            "location": "/tutorials/step2-redis/#setting",
            "text": "Edit the  settings.py , change it to:  import   os  from   toapi.cache   import   RedisCache ,   JsonSerializer  from   toapi.settings   import   Settings  class   MySettings ( Settings ): \n     \"\"\"      Create custom configuration      http://www.toapi.org/topics/settings/      \"\"\" \n\n     cache   =   { \n         'cache_class' :   RedisCache , \n         'cache_config' :   { \n             'host' :   '127.0.0.1' , \n             'port' :   6379 , \n             'db' :   0 \n         }, \n         'serializer' :   JsonSerializer , \n         'ttl' :   10000 \n     } \n     storage   =   { \n         \"PATH\" :   os . getcwd (), \n         \"DB_URL\" :   None \n     } \n     web   =   { \n         \"with_ajax\" :   False , \n         \"request_config\" :   {}, \n         \"headers\" :   None \n     }   Try to run command  toapi run . If it works, you do good job. \nIf something wrong, please check the redis and the redis library for python.",
            "title": "Setting"
        },
        {
            "location": "/tutorials/step3-sqlite3/",
            "text": "Prepare Sqlite3\n\uf0c1\n\n\n$ sqlite3 --version                     \n3.11.0 2016-02-15 17:29:24 3d862f207e3adc00f78066799ac5a8c282430a5f\n\n\n\n\n\nIf you don't have sqlite3, you need to install it.\n\n\nSetting\n\uf0c1\n\n\nEdit the \nsettings.py\n, change it to:\n\n\nimport\n \nos\n\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nRedisCache\n\n\nfrom\n \ntoapi.settings\n \nimport\n \nSettings\n\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    http://www.toapi.org/topics/settings/\n\n\n    \"\"\"\n\n\n    \ncache\n \n=\n \n{\n\n        \n'cache_class'\n:\n \nRedisCache\n,\n\n        \n'cache_config'\n:\n \n{\n\n            \n'host'\n:\n \n'127.0.0.1'\n,\n\n            \n'port'\n:\n \n6379\n,\n\n            \n'db'\n:\n \n0\n\n        \n},\n\n        \n'ttl'\n:\n \n10000\n\n    \n}\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \nos\n.\ngetcwd\n(),\n\n        \n\"DB_URL\"\n:\n \n'sqlite:///data.sqlite'\n\n    \n}\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nFalse\n,\n\n        \n\"request_config\"\n:\n \n{},\n\n        \n\"headers\"\n:\n \nNone\n\n    \n}\n\n\n\n\n\n\nTry to run command \ntoapi run\n. If it works, you do good job. \nIn the root directory there should be a \ndata.sqlite\n file.\nIf something wrong, please check the sqlite3 and the sqlite3 library for python.",
            "title": "Step 3 Using Sqlite"
        },
        {
            "location": "/tutorials/step3-sqlite3/#prepare-sqlite3",
            "text": "$ sqlite3 --version                     \n3.11.0 2016-02-15 17:29:24 3d862f207e3adc00f78066799ac5a8c282430a5f  If you don't have sqlite3, you need to install it.",
            "title": "Prepare Sqlite3"
        },
        {
            "location": "/tutorials/step3-sqlite3/#setting",
            "text": "Edit the  settings.py , change it to:  import   os  from   toapi.cache   import   RedisCache  from   toapi.settings   import   Settings  class   MySettings ( Settings ): \n     \"\"\"      Create custom configuration      http://www.toapi.org/topics/settings/      \"\"\" \n\n     cache   =   { \n         'cache_class' :   RedisCache , \n         'cache_config' :   { \n             'host' :   '127.0.0.1' , \n             'port' :   6379 , \n             'db' :   0 \n         }, \n         'ttl' :   10000 \n     } \n     storage   =   { \n         \"PATH\" :   os . getcwd (), \n         \"DB_URL\" :   'sqlite:///data.sqlite' \n     } \n     web   =   { \n         \"with_ajax\" :   False , \n         \"request_config\" :   {}, \n         \"headers\" :   None \n     }   Try to run command  toapi run . If it works, you do good job. \nIn the root directory there should be a  data.sqlite  file.\nIf something wrong, please check the sqlite3 and the sqlite3 library for python.",
            "title": "Setting"
        },
        {
            "location": "/tutorials/step4-defining-items/",
            "text": "Focus on the item directory\n\uf0c1\n\n\npexels.py\n:\n\n\nfrom\n \ntoapi\n \nimport\n \nItem\n,\n \nXPath\n\n\n\n\nclass\n \nPexels\n(\nItem\n):\n\n    \n__base_url__\n \n=\n \n'https://www.pexels.com'\n\n    \nimg\n \n=\n \nXPath\n(\n'//a//img/@src'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//article[@class=\"photo-item\"]'\n)\n\n        \nroute\n \n=\n \n{\n'/pic/?q=:key'\n:\n \n'/search/:key/'\n}\n\n\n\n\n\n\npixabay.py\n:\n\n\nfrom\n \ntoapi\n \nimport\n \nItem\n,\n \nXPath\n\n\n\n\nclass\n \nPixabay\n(\nItem\n):\n\n    \n__base_url__\n \n=\n \n'https://pixabay.com/'\n\n    \nimg\n \n=\n \nXPath\n(\n'//a//img/@src'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//div[@class=\"item\"]'\n)\n\n        \nroute\n \n=\n \n{\n'/pic/?q=:key'\n:\n \n'/zh/photos/?q=:key'\n}\n\n\n\n\n\n\nPretty simple.\n\n\n\n\nDefine the section you want to parse. (Meta.source)\n\n\nDefine the fileds relative to section.\n\n\nDefine the map of expose route of our api server and the routes of source website.\n\n\n\n\nRegister\n\uf0c1\n\n\nWhen you defined your items, you have to register theme to app. So that the app\ncould know how to work.\n\n\nIn the file \napp.py\n:\n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n\n\n\nfrom\n \nitems.pexels\n \nimport\n \nPexels\n\n\nfrom\n \nitems.pixabay\n \nimport\n \nPixabay\n\n\nfrom\n \nsettings\n \nimport\n \nMySettings\n\n\n\napi\n \n=\n \nApi\n(\nsettings\n=\nMySettings\n)\n\n\napi\n.\nregister\n(\nPixabay\n)\n\n\napi\n.\nregister\n(\nPexels\n)\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \napi\n.\nserve\n()",
            "title": "Step 4 Defining Items"
        },
        {
            "location": "/tutorials/step4-defining-items/#focus-on-the-item-directory",
            "text": "pexels.py :  from   toapi   import   Item ,   XPath  class   Pexels ( Item ): \n     __base_url__   =   'https://www.pexels.com' \n     img   =   XPath ( '//a//img/@src' ) \n\n     class   Meta : \n         source   =   XPath ( '//article[@class=\"photo-item\"]' ) \n         route   =   { '/pic/?q=:key' :   '/search/:key/' }   pixabay.py :  from   toapi   import   Item ,   XPath  class   Pixabay ( Item ): \n     __base_url__   =   'https://pixabay.com/' \n     img   =   XPath ( '//a//img/@src' ) \n\n     class   Meta : \n         source   =   XPath ( '//div[@class=\"item\"]' ) \n         route   =   { '/pic/?q=:key' :   '/zh/photos/?q=:key' }   Pretty simple.   Define the section you want to parse. (Meta.source)  Define the fileds relative to section.  Define the map of expose route of our api server and the routes of source website.",
            "title": "Focus on the item directory"
        },
        {
            "location": "/tutorials/step4-defining-items/#register",
            "text": "When you defined your items, you have to register theme to app. So that the app\ncould know how to work.  In the file  app.py :  from   toapi   import   Api  from   items.pexels   import   Pexels  from   items.pixabay   import   Pixabay  from   settings   import   MySettings  api   =   Api ( settings = MySettings )  api . register ( Pixabay )  api . register ( Pexels )  if   __name__   ==   '__main__' : \n     api . serve ()",
            "title": "Register"
        },
        {
            "location": "/tutorials/step5-deploy/",
            "text": "Caddy\n\uf0c1\n\n\n\n\nCaddy is the HTTP/2 web server with automatic HTTPS.\n\n\n\n\nhttps://caddyserver.com/docs\n\n\nMake sure you install caddy:\n\n\n$ caddy -version\nCaddy 0.10.10 (non-commercial use only)\n\n\n\n\n\nGunicorn\n\uf0c1\n\n\n\n\nGunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX. \nIt's a pre-fork worker model. \nThe Gunicorn server is broadly compatible with various web frameworks, \nsimply implemented, light on server resources, and fairly speedy.\n\n\n\n\nMake sure you install caddy:\n\n\n$ gunicorn -v\ngunicorn (version 19.7.1)\n\n\n\n\n\nRun!\n\uf0c1\n\n\nLaunch gunicorn: gunicorn -b \"127.0.0.1:5000\" wsgi Usually, \nyou will have your gunicorn script on a supervisor, or something else\n\n\n$ gunicorn -b \"127.0.0.1:5000\" wsgi:app \n[2017-12-26 10:55:18 +0800] [21545] [INFO] Starting gunicorn 19.7.1\n[2017-12-26 10:55:18 +0800] [21545] [INFO] Listening at: http://127.0.0.1:5000 (21545)\n[2017-12-26 10:55:18 +0800] [21545] [INFO] Using worker: sync\n[2017-12-26 10:55:18 +0800] [21548] [INFO] Booting worker with pid: 21548\n2017/12/26 10:55:18 [Register] OK <Pixabay> \n2017/12/26 10:55:18 [Register] OK <Pexels> \n\n\n\n\n\nCreate Caddyfile\n\n\n$ touch Caddyfile\n\n\n\n\n\nEdit the Caddyfile as follows:\n\n\n:8080 {\n    proxy / localhost:5000 {\n        transparent\n    }\n}\n\n\n\n\n\nNext step:\n\n\n$ caddy\nActivating privacy features... done.\nhttp://localhost:8080\n\n\n\n\n\nWell done! Everything is ok! You can get more information from \ntopics\n or just \ngo to write your own APIs!\n\n\nThe result directory structure:\n\uf0c1\n\n\n$ tree .   \n.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 Caddyfile\n\u251c\u2500\u2500 data.sqlite\n\u251c\u2500\u2500 items\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pexels.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pixabay.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.cpython-36.pyc\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pexels.cpython-36.pyc\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 pixabay.cpython-36.pyc\n\u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.cpython-36.pyc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.cpython-36.pyc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.cpython-36.pyc\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 settings.py\n\u2514\u2500\u2500 wsgi.py\n\n3 directories, 15 files",
            "title": "Step 5 Deploy"
        },
        {
            "location": "/tutorials/step5-deploy/#caddy",
            "text": "Caddy is the HTTP/2 web server with automatic HTTPS.   https://caddyserver.com/docs  Make sure you install caddy:  $ caddy -version\nCaddy 0.10.10 (non-commercial use only)",
            "title": "Caddy"
        },
        {
            "location": "/tutorials/step5-deploy/#gunicorn",
            "text": "Gunicorn 'Green Unicorn' is a Python WSGI HTTP Server for UNIX. \nIt's a pre-fork worker model. \nThe Gunicorn server is broadly compatible with various web frameworks, \nsimply implemented, light on server resources, and fairly speedy.   Make sure you install caddy:  $ gunicorn -v\ngunicorn (version 19.7.1)",
            "title": "Gunicorn"
        },
        {
            "location": "/tutorials/step5-deploy/#run",
            "text": "Launch gunicorn: gunicorn -b \"127.0.0.1:5000\" wsgi Usually, \nyou will have your gunicorn script on a supervisor, or something else  $ gunicorn -b \"127.0.0.1:5000\" wsgi:app \n[2017-12-26 10:55:18 +0800] [21545] [INFO] Starting gunicorn 19.7.1\n[2017-12-26 10:55:18 +0800] [21545] [INFO] Listening at: http://127.0.0.1:5000 (21545)\n[2017-12-26 10:55:18 +0800] [21545] [INFO] Using worker: sync\n[2017-12-26 10:55:18 +0800] [21548] [INFO] Booting worker with pid: 21548\n2017/12/26 10:55:18 [Register] OK <Pixabay> \n2017/12/26 10:55:18 [Register] OK <Pexels>   Create Caddyfile  $ touch Caddyfile  Edit the Caddyfile as follows:  :8080 {\n    proxy / localhost:5000 {\n        transparent\n    }\n}  Next step:  $ caddy\nActivating privacy features... done.\nhttp://localhost:8080  Well done! Everything is ok! You can get more information from  topics  or just \ngo to write your own APIs!",
            "title": "Run!"
        },
        {
            "location": "/tutorials/step5-deploy/#the-result-directory-structure",
            "text": "$ tree .   \n.\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 Caddyfile\n\u251c\u2500\u2500 data.sqlite\n\u251c\u2500\u2500 items\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pexels.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 pixabay.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 __init__.cpython-36.pyc\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 pexels.cpython-36.pyc\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 pixabay.cpython-36.pyc\n\u251c\u2500\u2500 __pycache__\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 app.cpython-36.pyc\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 settings.cpython-36.pyc\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 wsgi.cpython-36.pyc\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 settings.py\n\u2514\u2500\u2500 wsgi.py\n\n3 directories, 15 files",
            "title": "The result directory structure:"
        },
        {
            "location": "/topics/api/",
            "text": "Api is the whole program entrance which connects items, cache, storage, \nhandles the request from user and fetches html from source sites. For \nexample:\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n,\n \nApi\n\n\n\napi\n \n=\n \nApi\n(\nbase_url\n=\n'https://news.ycombinator.com'\n)\n\n\n\n\nclass\n \nPost\n(\nItem\n):\n\n    \nurl\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//tr[@class=\"athing\"]'\n)\n\n        \nroute\n \n=\n \n'/'\n\n\n\n\napi\n.\nregister\n(\nPost\n)\n\n\napi\n.\nserve\n()\n\n\n\n\n\n\nArguments\n\uf0c1\n\n\nbase_url\n\uf0c1\n\n\nThe argument \nbase_url\n is hostname of source web site. \ndefault = None\n\n\nsettings\n\uf0c1\n\n\nThe argument \nsettings\n is the global configuration of the whole app. \ndefault = None\n means use default settings.\n\n\n\n\nMethods\n\uf0c1\n\n\n.register(self, item)\n\uf0c1\n\n\nRegister an item so that we could parse it.\n\n\n.serve(self, ip='127.0.0.1', port=5000, **options)\n\uf0c1\n\n\nStart to serve.\n\n\n.parse(self, path, params=None, **kwargs)\n\uf0c1\n\n\nParse items if the path is defined in registered items.\n\n\n.fetch_page_source(self, url, item, params=None, **kwargs)\n\uf0c1\n\n\nFetch html from an url.\n\n\n.get_browser(self, settings, item_with_ajax=False)\n\uf0c1\n\n\nInit a PhantomJS instance to the Api instance.\n\n\n.update_status(self, key)\n\uf0c1\n\n\nUpdate status of Api instance.\n\n\n.get_status(self, key)\n\uf0c1\n\n\nGet status of Api instance.\n\n\n.set_cache(self, key, value)\n\uf0c1\n\n\nSet cache. In Api instance, the value usually in type of \ndict\n.\n\n\n.get_cache(self, key)\n\uf0c1\n\n\nGet cache.\n\n\n.set_storage(self, key, value)\n\uf0c1\n\n\nSet storage.In Api instance, the value is usually a HTML.\n\n\n.get_storage(self, key)\n\uf0c1\n\n\nGet storage.\n\n\n.parse_item(self,  html, item)\n\uf0c1\n\n\nParse items from HTML.",
            "title": "Api"
        },
        {
            "location": "/topics/api/#arguments",
            "text": "",
            "title": "Arguments"
        },
        {
            "location": "/topics/api/#base_url",
            "text": "The argument  base_url  is hostname of source web site.  default = None",
            "title": "base_url"
        },
        {
            "location": "/topics/api/#settings",
            "text": "The argument  settings  is the global configuration of the whole app.  default = None  means use default settings.",
            "title": "settings"
        },
        {
            "location": "/topics/api/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/topics/api/#registerself-item",
            "text": "Register an item so that we could parse it.",
            "title": ".register(self, item)"
        },
        {
            "location": "/topics/api/#serveself-ip127001-port5000-options",
            "text": "Start to serve.",
            "title": ".serve(self, ip='127.0.0.1', port=5000, **options)"
        },
        {
            "location": "/topics/api/#parseself-path-paramsnone-kwargs",
            "text": "Parse items if the path is defined in registered items.",
            "title": ".parse(self, path, params=None, **kwargs)"
        },
        {
            "location": "/topics/api/#fetch_page_sourceself-url-item-paramsnone-kwargs",
            "text": "Fetch html from an url.",
            "title": ".fetch_page_source(self, url, item, params=None, **kwargs)"
        },
        {
            "location": "/topics/api/#get_browserself-settings-item_with_ajaxfalse",
            "text": "Init a PhantomJS instance to the Api instance.",
            "title": ".get_browser(self, settings, item_with_ajax=False)"
        },
        {
            "location": "/topics/api/#update_statusself-key",
            "text": "Update status of Api instance.",
            "title": ".update_status(self, key)"
        },
        {
            "location": "/topics/api/#get_statusself-key",
            "text": "Get status of Api instance.",
            "title": ".get_status(self, key)"
        },
        {
            "location": "/topics/api/#set_cacheself-key-value",
            "text": "Set cache. In Api instance, the value usually in type of  dict .",
            "title": ".set_cache(self, key, value)"
        },
        {
            "location": "/topics/api/#get_cacheself-key",
            "text": "Get cache.",
            "title": ".get_cache(self, key)"
        },
        {
            "location": "/topics/api/#set_storageself-key-value",
            "text": "Set storage.In Api instance, the value is usually a HTML.",
            "title": ".set_storage(self, key, value)"
        },
        {
            "location": "/topics/api/#get_storageself-key",
            "text": "Get storage.",
            "title": ".get_storage(self, key)"
        },
        {
            "location": "/topics/api/#parse_itemself-html-item",
            "text": "Parse items from HTML.",
            "title": ".parse_item(self,  html, item)"
        },
        {
            "location": "/topics/item/",
            "text": "Item is the key to the whole system which determine what is the result and\nwhere is the result. \n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n\n\n\nclass\n \nMovieList\n(\nItem\n):\n\n    \n__base_url__\n \n=\n \n'http://www.dy2018.com'\n\n\n    \nurl\n \n=\n \nXPath\n(\n'//b//a[@class=\"ulink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//b//a[@class=\"ulink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//table[@class=\"tbspan\"]'\n)\n\n        \nroute\n \n=\n \n{\n'/movies/?page=1'\n:\n \n'/html/gndy/dyzz/'\n,\n\n                 \n'/movies/?page=:page'\n:\n \n'/html/gndy/dyzz/index_:page.html'\n,\n\n                 \n'/movies/'\n:\n \n'/html/gndy/dyzz/'\n}\n\n\n\n\n\n\nWhen you visit \nhttp://127.0.0.1:/movies/?page=2\n, You could get the item from \nhttp://www.dy2018.com/html/gndy/dyzz/index_2.html\n\n\nAs you can see. The fields of item are \nselector instances\n. \nAnd the Meta class determine the basic attributes of item.\n\n\n\n\nMeta.source: A section of a HTML, which should contains one complete item. It is a \nselector instance\n\n\nMeta.route: The url path regex expression of source site.\n\n\n\n\nClean Data\n\uf0c1\n\n\nThe \nclean_{field}\n method of item instance is for further processing the returned values. For example:\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n\n\n\nclass\n \nPost\n(\nItem\n):\n\n    \nurl\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//tr[@class=\"athing\"]'\n)\n\n        \nroute\n \n=\n \n{\n'/'\n:\n'/'\n}\n\n\n    \ndef\n \nclean_url\n(\nself\n,\n \nurl\n):\n\n        \nreturn\n \n'http://127.0.0.1\n%s\n'\n \n%\n \nurl",
            "title": "Item"
        },
        {
            "location": "/topics/item/#clean-data",
            "text": "The  clean_{field}  method of item instance is for further processing the returned values. For example:  from   toapi   import   XPath ,   Item  class   Post ( Item ): \n     url   =   XPath ( '//a[@class=\"storylink\"]/@href' ) \n     title   =   XPath ( '//a[@class=\"storylink\"]/text()' ) \n\n     class   Meta : \n         source   =   XPath ( '//tr[@class=\"athing\"]' ) \n         route   =   { '/' : '/' } \n\n     def   clean_url ( self ,   url ): \n         return   'http://127.0.0.1 %s '   %   url",
            "title": "Clean Data"
        },
        {
            "location": "/topics/selector/",
            "text": "Selector fields is used to parse field values from HTML. There are three selectors right now:\n\n\n\n\nXPath\n\n\nCss\n\n\nRegex\n\n\n\n\nCore arguments\n\uf0c1\n\n\nEach Selector field class constructor takes at least these arguments.  Some Field classes take additional, field-specific arguments, but the following should always be accepted:\n\n\nrule\n\uf0c1\n\n\nThe arguments \nrule\n is the rule of selector which maybe a xpath expression or a css select expression or a regex expression.\n\n\nXPath Selector\n\uf0c1\n\n\nThe rule argument is xpath expression.\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n\n\n\nfield\n \n=\n \nXPath\n(\n'//a[@class=\"user\"]/text()'\n)\n\n\n\n\n\n\nSignature:\n \nXPath(rule)\n\n\n\n\nCss Selector\n\uf0c1\n\n\nThe rule argument is css select expression.\n\n\nfrom\n \ntoapi\n \nimport\n \nCss\n\n\n\nfield\n \n=\n \nCss\n(\n'a.user'\n,\n \nattr\n=\n'href'\n)\n\n\n\n\n\n\nSignature:\n \nCss(rule, attr=None)\n\n\n\n\nattr\n Css select expression can't determine which part ot parse. We need the \nattr\n argument for that.\n\n\n\n\n\n\nRegex Selector\n\uf0c1\n\n\nThe rule argument regex expression.\n\n\nfrom\n \ntoapi\n \nimport\n \nRegex\n\n\n\nfield\n \n=\n \nRegex\n(\n'\\d{18}'\n)\n\n\n\n\n\n\nSignature:\n \nRegex(rule)",
            "title": "Selector"
        },
        {
            "location": "/topics/selector/#core-arguments",
            "text": "Each Selector field class constructor takes at least these arguments.  Some Field classes take additional, field-specific arguments, but the following should always be accepted:",
            "title": "Core arguments"
        },
        {
            "location": "/topics/selector/#rule",
            "text": "The arguments  rule  is the rule of selector which maybe a xpath expression or a css select expression or a regex expression.",
            "title": "rule"
        },
        {
            "location": "/topics/selector/#xpath-selector",
            "text": "The rule argument is xpath expression.  from   toapi   import   XPath  field   =   XPath ( '//a[@class=\"user\"]/text()' )   Signature:   XPath(rule)",
            "title": "XPath Selector"
        },
        {
            "location": "/topics/selector/#css-selector",
            "text": "The rule argument is css select expression.  from   toapi   import   Css  field   =   Css ( 'a.user' ,   attr = 'href' )   Signature:   Css(rule, attr=None)   attr  Css select expression can't determine which part ot parse. We need the  attr  argument for that.",
            "title": "Css Selector"
        },
        {
            "location": "/topics/selector/#regex-selector",
            "text": "The rule argument regex expression.  from   toapi   import   Regex  field   =   Regex ( '\\d{18}' )   Signature:   Regex(rule)",
            "title": "Regex Selector"
        },
        {
            "location": "/topics/settings/",
            "text": "Global settings.\n\n\nimport\n \nos\n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n,\n \nSettings\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nMemoryCache\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    \"\"\"\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \nos\n.\ngetcwd\n(),\n\n        \n\"DB_URL\"\n:\n \nNone\n\n    \n}\n\n    \ncache\n \n=\n \n{\n\n        \n# If you want to use other classes, just replace it\n\n        \n'cache_class'\n:\n \nMemoryCache\n,\n\n        \n'cache_config'\n:\n \n{},\n\n        \n# Default value is JsonSerializer\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nTrue\n,\n\n        \n\"request_config\"\n:\n \n{},\n\n        \n\"headers\"\n:\n \nNone\n\n    \n}\n\n\n\napi\n \n=\n \nApi\n(\n'https://www.github.com'\n,\n \nsettings\n=\nMySettings\n)\n\n\n\n\n\n\nAttributes\n\uf0c1\n\n\ncache\n\uf0c1\n\n\nConfig how the app perform \ncache\n. \n\n\nstorage\n\uf0c1\n\n\nConfig how the app perform \nstorage\n. \n\n\nweb\n\uf0c1\n\n\nConfig how the app perform request.",
            "title": "Settings"
        },
        {
            "location": "/topics/settings/#attributes",
            "text": "",
            "title": "Attributes"
        },
        {
            "location": "/topics/settings/#cache",
            "text": "Config how the app perform  cache .",
            "title": "cache"
        },
        {
            "location": "/topics/settings/#storage",
            "text": "Config how the app perform  storage .",
            "title": "storage"
        },
        {
            "location": "/topics/settings/#web",
            "text": "Config how the app perform request.",
            "title": "web"
        },
        {
            "location": "/topics/cache/",
            "text": "When you are writing a service, maybe you need to be able to save a piece of JSON data to your system's memory.\n\n\nThere are three ways to create a cache, which are MemoryCache, RedisCache or MemcachedCache.\n\n\nWhat is the difference between these three ways?\n\n\n\n\nMemoryCache\n: easy to configure, but it automatically destroys when the server is stopped.\n\n\nRedisCache\n: stable but you have to install Redis.\n\n\nMemcachedCache\n: stable but you have to install Memcached.\n\n\n\n\nThere are two serialization schemes we provide for you:\n\n\n\n\nJsonSerializer\n\n\nPickleSerializer\n\n\n\n\nCore arguments\n\uf0c1\n\n\nRedisCache\n and \nMemcachedCache\n class constructor must takes these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:\n\n\n\n\nhost\n\n\nport\n\n\n\n\n\n\nNote\n\n\nMemoryCache\n can be instantiated directly\n\n\n\n\nMethods\n\uf0c1\n\n\n.set(self, key, value, ttl=None, **kwargs)\n\uf0c1\n\n\nSet the value at key \nkey\n to \nvalue\n\n\n.get(self, key, default=None, **kwargs)\n\uf0c1\n\n\nReturn the value at key \nname\n, or None if the key doesn't exist\n\n\n.delete(self, key, **kwargs)\n\uf0c1\n\n\nDelete one or more keys specified by \nkeys\n\n\n.exists(self, key, **kwargs)\n\uf0c1\n\n\nReturns a boolean indicating whether key \nname\n exists\n\n\n.incr(self, key, **kwargs)\n\uf0c1\n\n\nIncrements the value of \nkey\n\n\n.api_cached(self, ttl=None, **kwargs)\n\uf0c1\n\n\nThis decorator provides a caching mechanism for the data\n\n\n\n\nparam cache_class: such as RedisCache MemcachedCache MemoryCache\n\n\nparam ttl: int seconds to store the data\n\n\nparam serializer: serialize the value\n\n\n\n\nUsage\n\uf0c1\n\n\nThese methods can be used with very convenient, first of all, you just need to add one new class which inheritance the \nToapi.Settings\n.\n\n\nLet's take a look at a quick example of using MemoryCache.Start off by adding the following to your \nsettings.py\n:\n\n\nfrom\n \ntoapi.cache\n \nimport\n \nMemoryCache\n,\n \nRedisCache\n\n\n\n\nclass\n \nMyMemorySettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    Create custom configuration\n\n\n    \"\"\"\n\n    \ncache\n \n=\n \n{\n\n        \n# If you want to use other classes, just replace it\n\n        \n'cache_class'\n:\n \nMemoryCache\n,\n\n        \n'cache_config'\n:\n \n{},\n\n        \n# Default value is JsonSerializer\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n\n\nclass\n \nMyRedisSettings\n(\nSettings\n):\n\n    \n\"\"\"\n\n\n    If you want to use Redis, you can create your configuration like this\n\n\n    \"\"\"\n\n    \ncache\n \n=\n \n{\n\n        \n# If you want to use other classes, just replace it\n\n        \n'cache_class'\n:\n \nRedisCache\n,\n\n        \n'cache_config'\n:\n \n{\n\n            \n'host'\n:\n \n'127.0.0.1'\n,\n\n            \n'port'\n:\n \n6379\n,\n\n            \n'db'\n:\n \n0\n,\n\n            \n'password'\n:\n \nNone\n\n        \n},\n\n        \n'serializer'\n:\n \nNone\n,\n\n        \n'ttl'\n:\n \nNone\n\n    \n}\n\n\n\n\n\n\nNext create \ncache_demo.py\n:\n\n\nfrom\n \ntoapi.cache\n \nimport\n \ncached\n,\n \nCacheSetting\n\n\n\nfrom\n \nsettings\n \nimport\n \nMyMemorySettings\n\n\n\n# Create a cache instance\n\n\n# Or cache_ins = CacheSetting(MyRedisSettings)\n\n\ncache_ins\n \n=\n \nCacheSetting\n(\nMyMemorySettings\n)\n\n\n\n# Set the value at key, the key will be automatically deleted after 10s\n\n\ncache_ins\n.\nset\n(\nkey\n=\n'name'\n,\n \nvalue\n=\n'toapi'\n,\n \nttl\n=\n10\n)\n\n\n\n# Return the value at key ``name``,\n\n\nvalue\n \n=\n \ncache_ins\n.\nget\n(\nkey\n=\n'name'\n)\n\n\n\n# Output\n\n\n# toapi\n\n\n\n\n\n\nOnce a cache instance has been created, you can use it anywhere to implement data caching.\n\n\nNow you know some of the basic operations for using cache_ins, but how can you add a cache to your API service?\n\n\nAdd the following to your \napp.py\n:\n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n\n\n\nfrom\n \nsettings\n \nimport\n \nMyMemorySettings\n\n\n\napi\n \n=\n \nApi\n(\n'https://www.github.com'\n,\n \nsettings\n=\nMyMemorySettings\n)\n\n\n\n\n\n\nHow It Works?\n\uf0c1\n\n\nThe \nApi\n class will initialize the \ncache\n attribute based on the value of settings.\n\n\n\n\nNote\n\n\nApi class can accept a parameter named settings, if settings is None, the default configuration will take effect\n\n\nYou can read the basic configuration from \ntoapi/settings.py",
            "title": "Cache"
        },
        {
            "location": "/topics/cache/#core-arguments",
            "text": "RedisCache  and  MemcachedCache  class constructor must takes these arguments. Some Field classes take additional, field-specific arguments, but the following should always be accepted:   host  port    Note  MemoryCache  can be instantiated directly",
            "title": "Core arguments"
        },
        {
            "location": "/topics/cache/#methods",
            "text": "",
            "title": "Methods"
        },
        {
            "location": "/topics/cache/#setself-key-value-ttlnone-kwargs",
            "text": "Set the value at key  key  to  value",
            "title": ".set(self, key, value, ttl=None, **kwargs)"
        },
        {
            "location": "/topics/cache/#getself-key-defaultnone-kwargs",
            "text": "Return the value at key  name , or None if the key doesn't exist",
            "title": ".get(self, key, default=None, **kwargs)"
        },
        {
            "location": "/topics/cache/#deleteself-key-kwargs",
            "text": "Delete one or more keys specified by  keys",
            "title": ".delete(self, key, **kwargs)"
        },
        {
            "location": "/topics/cache/#existsself-key-kwargs",
            "text": "Returns a boolean indicating whether key  name  exists",
            "title": ".exists(self, key, **kwargs)"
        },
        {
            "location": "/topics/cache/#incrself-key-kwargs",
            "text": "Increments the value of  key",
            "title": ".incr(self, key, **kwargs)"
        },
        {
            "location": "/topics/cache/#api_cachedself-ttlnone-kwargs",
            "text": "This decorator provides a caching mechanism for the data   param cache_class: such as RedisCache MemcachedCache MemoryCache  param ttl: int seconds to store the data  param serializer: serialize the value",
            "title": ".api_cached(self, ttl=None, **kwargs)"
        },
        {
            "location": "/topics/cache/#usage",
            "text": "These methods can be used with very convenient, first of all, you just need to add one new class which inheritance the  Toapi.Settings .  Let's take a look at a quick example of using MemoryCache.Start off by adding the following to your  settings.py :  from   toapi.cache   import   MemoryCache ,   RedisCache  class   MyMemorySettings ( Settings ): \n     \"\"\"      Create custom configuration      \"\"\" \n     cache   =   { \n         # If you want to use other classes, just replace it \n         'cache_class' :   MemoryCache , \n         'cache_config' :   {}, \n         # Default value is JsonSerializer \n         'serializer' :   None , \n         'ttl' :   None \n     }  class   MyRedisSettings ( Settings ): \n     \"\"\"      If you want to use Redis, you can create your configuration like this      \"\"\" \n     cache   =   { \n         # If you want to use other classes, just replace it \n         'cache_class' :   RedisCache , \n         'cache_config' :   { \n             'host' :   '127.0.0.1' , \n             'port' :   6379 , \n             'db' :   0 , \n             'password' :   None \n         }, \n         'serializer' :   None , \n         'ttl' :   None \n     }   Next create  cache_demo.py :  from   toapi.cache   import   cached ,   CacheSetting  from   settings   import   MyMemorySettings  # Create a cache instance  # Or cache_ins = CacheSetting(MyRedisSettings)  cache_ins   =   CacheSetting ( MyMemorySettings )  # Set the value at key, the key will be automatically deleted after 10s  cache_ins . set ( key = 'name' ,   value = 'toapi' ,   ttl = 10 )  # Return the value at key ``name``,  value   =   cache_ins . get ( key = 'name' )  # Output  # toapi   Once a cache instance has been created, you can use it anywhere to implement data caching.  Now you know some of the basic operations for using cache_ins, but how can you add a cache to your API service?  Add the following to your  app.py :  from   toapi   import   Api  from   settings   import   MyMemorySettings  api   =   Api ( 'https://www.github.com' ,   settings = MyMemorySettings )",
            "title": "Usage"
        },
        {
            "location": "/topics/cache/#how-it-works",
            "text": "The  Api  class will initialize the  cache  attribute based on the value of settings.   Note  Api class can accept a parameter named settings, if settings is None, the default configuration will take effect  You can read the basic configuration from  toapi/settings.py",
            "title": "How It Works?"
        },
        {
            "location": "/topics/storage/",
            "text": "Storage provides 2 ways to you to store your data -- local disk and database.\n\n\nHow to configure them\n\uf0c1\n\n\nLocal Disk\n\uf0c1\n\n\nYour data will be stored in a hidden file called .html which will be created in where programe running.\n\nYou can still input the path you want to store in Settings.  \n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n,\n \nSettings\n\n\n\n\nclass\n \nMySettings\n(\nSetting\n):\n\n    \n'''your own settings'''\n\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \n\"/Users/username/toapi\"\n,\n\n        \n\"DB_URL\"\n:\n \nNone\n\n    \n}\n  \n\n\n\n\n\n\bSytem will load your path, and create a hidden file -- .html under your path: /Users/username/toapi/.html, and every site will be stored here.\n\n\nDatabase\n\uf0c1\n\n\nYou need a database to save your import data and make it read faster.\n\nTo use database, you have to configure it first.\n\n\nfrom\n \ntoapi\n \nimport\n \nApi\n,\n \nSettings\n\n\n\n\nclass\n \nMySettings\n(\nSetting\n):\n\n    \n'''your own settings'''\n\n\n    \nstorage\n \n=\n \n{\n\n        \n\"PATH\"\n:\n \n\"/Users/username/toapi\"\n,\n\n        \n\"DB_URL\"\n:\n \n\"sqlite:////User/username/toapi/data.sqlite\"\n\n    \n}\n\n\n\n\n\n\nwarning: if you configure PATH and DB_URL both, system will use database only!\n\n\nHow to use storage\n\uf0c1\n\n\nIt\u2018s easy and cheeryful to use it, you even do not configure anything.\n\n\nfrom\n \nstorage\n \nimport\n \nStorage\n\n\nfrom\n \napi\n \nimport\n \nSettings\n\n\n\nstore\n \n=\n \nStorage\n(\nSettings\n)\n\n\nurl\n \n=\n \n\"www.toapi.org\"\n\n\nhtml\n \n=\n \n\"html content\"\n\n\nstore\n.\nsave\n(\nurl\n,\n \nhtml\n)\n\n\nstore\n.\nget\n(\nurl\n)\n \n# you can give a expiration\n\n\n\n\n\n\nAttributes\n\uf0c1\n\n\nsave(url, html)\n\uf0c1\n\n\nsave() receive two params, url and html.\n\n- url is the url you current surf\n- html is the contents you current surf.\n\n\nget(url, default, expiration)\n\uf0c1\n\n\nget() receive three params, url, default and expiration.\n\n- url is easy and simple to know.\n\n- default is the returned value while no result finding in disk or database.\n- expiration means you want to get the contents in expired time, if data expired, the system will automatically delete.",
            "title": "Storage"
        },
        {
            "location": "/topics/storage/#how-to-configure-them",
            "text": "",
            "title": "How to configure them"
        },
        {
            "location": "/topics/storage/#local-disk",
            "text": "Your data will be stored in a hidden file called .html which will be created in where programe running. \nYou can still input the path you want to store in Settings.    from   toapi   import   Api ,   Settings  class   MySettings ( Setting ): \n     '''your own settings''' \n\n     storage   =   { \n         \"PATH\" :   \"/Users/username/toapi\" , \n         \"DB_URL\" :   None \n     }     \bSytem will load your path, and create a hidden file -- .html under your path: /Users/username/toapi/.html, and every site will be stored here.",
            "title": "Local Disk"
        },
        {
            "location": "/topics/storage/#database",
            "text": "You need a database to save your import data and make it read faster. \nTo use database, you have to configure it first.  from   toapi   import   Api ,   Settings  class   MySettings ( Setting ): \n     '''your own settings''' \n\n     storage   =   { \n         \"PATH\" :   \"/Users/username/toapi\" , \n         \"DB_URL\" :   \"sqlite:////User/username/toapi/data.sqlite\" \n     }   warning: if you configure PATH and DB_URL both, system will use database only!",
            "title": "Database"
        },
        {
            "location": "/topics/storage/#how-to-use-storage",
            "text": "It\u2018s easy and cheeryful to use it, you even do not configure anything.  from   storage   import   Storage  from   api   import   Settings  store   =   Storage ( Settings )  url   =   \"www.toapi.org\"  html   =   \"html content\"  store . save ( url ,   html )  store . get ( url )   # you can give a expiration",
            "title": "How to use storage"
        },
        {
            "location": "/topics/storage/#attributes",
            "text": "",
            "title": "Attributes"
        },
        {
            "location": "/topics/storage/#saveurl-html",
            "text": "save() receive two params, url and html. \n- url is the url you current surf\n- html is the contents you current surf.",
            "title": "save(url, html)"
        },
        {
            "location": "/topics/storage/#geturl-default-expiration",
            "text": "get() receive three params, url, default and expiration. \n- url is easy and simple to know. \n- default is the returned value while no result finding in disk or database.\n- expiration means you want to get the contents in expired time, if data expired, the system will automatically delete.",
            "title": "get(url, default, expiration)"
        },
        {
            "location": "/articles/release/",
            "text": "Toapi released! You will never lack of data source!\n\uf0c1\n\n\nBrief Introduction\n\uf0c1\n\n\nDo you have such a demand, have a good idea,\nbut do not have a good source of data,\nit is not easy to find a relevant data sources website,\nbut found no API (yes but there may be fees),\n\n\nWhat it looks like?\n\n\n//\n \nhttp://\n127.0\n.\n0.1\n:\n5000\n/pic/?q=coffee\n\n\n\n{\n\n    \n\"Pixabay\"\n:\n \n[\n\n        \n{\n\n            \n\"img\"\n:\n \n\"https://cdn.pixabay.com/photo/2017/06/21/05/28/coffee-2426110__340.png\"\n\n        \n},\n\n        \n{\n\n            \n\"img\"\n:\n \n\"/static/img/blank.gif\"\n\n        \n}\n\n    \n],\n\n    \n\"Pexels\"\n:\n \n[\n\n        \n{\n\n            \n\"img\"\n:\n \n\"https://images.pexels.com/photos/302899/pexels-photo-302899.jpeg?h=350&auto=compress&cs=tinysrgb\"\n\n        \n},\n\n        \n{\n\n            \n\"img\"\n:\n \n\"https://images.pexels.com/photos/34085/pexels-photo.jpg?h=350&auto=compress&cs=tinysrgb\"\n\n        \n}\n\n    \n]\n\n\n}\n\n\n\n\n\n\nNow I can tell you, \nToapi\n provides a good solution for this.\nIt can:\n\n\n\n\nShort development cycle: a website can be built into your own API service with a small amount of code\n\n\nRobust Service Support: You only have to build and use it quickly, and the rest is peace of mind to \nToapi\n\n\nAutomatic \ndata cache\n, provides \nMemoryCache RedisCache MemcachedCache\n three caching solutions\n\n\nLocal persistence of source files, providing local and database support\n\n\nIncremental update\n\n\nCustom routing\n\n\nCustom multi-station assembly API\n\n\nA variety of template: every \nToapi\n service can be installed by other users, you do not need to write code, \n\n\n\n\nyou can install other services, and then combined into their own services. \nOfficial maintenance of a template list - [awesome-toapi] (https://github.com/toapi/awesome-toapi)\n\n\nToapi\n is an open source project written by \npython\n, \nyou can customize if you hava special functional requirements.\nWe provide complete ecology for you:\n\n\n\n\nproject website: \nhttps://github.com/gaojiuli/toapi\n\n\nproject organization (welcome to join us):\n\nhttps://github.com/toapi\n\n\ndoc website:\n\nhttp://www.toapi.org/\n\n\n\n\nUse Toapi\n\uf0c1\n\n\nTake a look at a simple example  below - just a demo \ntarget website is \nhackernews\n\uff1a\n\n\nfrom\n \ntoapi\n \nimport\n \nXPath\n,\n \nItem\n,\n \nApi\n,\n \nSettings\n\n\n\n\nclass\n \nMySettings\n(\nSettings\n):\n\n    \nweb\n \n=\n \n{\n\n        \n\"with_ajax\"\n:\n \nTrue\n,\n\n        \n\"request_config\"\n:\n \n{},\n\n        \n\"headers\"\n:\n \nNone\n\n    \n}\n\n\n\napi\n \n=\n \nApi\n(\n'https://news.ycombinator.com'\n,\n \nsettings\n=\nMySettings\n)\n\n\n\nclass\n \nPost\n(\nItem\n):\n\n    \nurl\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/@href'\n)\n\n    \ntitle\n \n=\n \nXPath\n(\n'//a[@class=\"storylink\"]/text()'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nXPath\n(\n'//tr[@class=\"athing\"]'\n)\n\n        \nroute\n \n=\n \n{\n'/news?p=:page'\n:\n \n'/news?p=:page'\n}\n\n\n\nclass\n \nPage\n(\nItem\n):\n\n    \nnext_page\n \n=\n \nXPath\n(\n'//a[@class=\"morelink\"]/@href'\n)\n\n\n    \nclass\n \nMeta\n:\n\n        \nsource\n \n=\n \nNone\n\n        \nroute\n \n=\n \n{\n'/news?p=:page'\n:\n \n'/news?p=:page'\n}\n\n\n    \ndef\n \nclean_next_page\n(\nself\n,\n \nnext_page\n):\n\n        \nreturn\n \n\"http://127.0.0.1:5000/\"\n \n+\n \nnext_page\n\n\n\napi\n.\nregister\n(\nPage\n)\n\n\napi\n.\nregister\n(\nPost\n)\n\n\n\napi\n.\nserve\n()\n\n\n# Visit http://127.0.0.1:5000/news?p=1\n\n\n\n\n\n\nLess than forty lines of code,\nyou have aleady have API service of \nhackernews\n.\nIntroduce current templates provided by official:\n\n\n\n\ntoapi-search\n: Baidu, Bing, Google, Sogou aggregation API\n\n\ntoapi-one\n API of One app \nhttp://wufazhuce.com/\n\n\ntoapi-ebooks\n: API of IT e-book source\n\n\ntoapi-instagram\n: API of Instagram \nhttps://www.instagram.com/\n\n\ntoapi-pic\n: API of HD photos website collection\n\n\ne.g.\n\n\n\n\nAt last\n\uf0c1\n\n\nToapi\n will not stop making progress. \nFrom the primitive version of the first edition to the fully functional version now, \nwe have nearly 400 commits in a month, of which hard work is unnecessary to say.\n\n\nWe sincerely hope developer use \nToapi\n to build server, \nand feedback your valuable opinion. \n\n\nGetting started \nToapi\n is a trivial matter and we would \nlike to see \nToapi\n make a contribution \nto open source community, for you to reduce the trouble of building an API.\n\n\nToapi development team(\n@gaojiuli\n, \n@howie6879\n, \n@wuqiangroy\n)",
            "title": "Toapi released"
        },
        {
            "location": "/articles/release/#toapi-released-you-will-never-lack-of-data-source",
            "text": "",
            "title": "Toapi released! You will never lack of data source!"
        },
        {
            "location": "/articles/release/#brief-introduction",
            "text": "Do you have such a demand, have a good idea,\nbut do not have a good source of data,\nit is not easy to find a relevant data sources website,\nbut found no API (yes but there may be fees),  What it looks like?  //   http:// 127.0 . 0.1 : 5000 /pic/?q=coffee  { \n     \"Pixabay\" :   [ \n         { \n             \"img\" :   \"https://cdn.pixabay.com/photo/2017/06/21/05/28/coffee-2426110__340.png\" \n         }, \n         { \n             \"img\" :   \"/static/img/blank.gif\" \n         } \n     ], \n     \"Pexels\" :   [ \n         { \n             \"img\" :   \"https://images.pexels.com/photos/302899/pexels-photo-302899.jpeg?h=350&auto=compress&cs=tinysrgb\" \n         }, \n         { \n             \"img\" :   \"https://images.pexels.com/photos/34085/pexels-photo.jpg?h=350&auto=compress&cs=tinysrgb\" \n         } \n     ]  }   Now I can tell you,  Toapi  provides a good solution for this.\nIt can:   Short development cycle: a website can be built into your own API service with a small amount of code  Robust Service Support: You only have to build and use it quickly, and the rest is peace of mind to  Toapi  Automatic  data cache , provides  MemoryCache RedisCache MemcachedCache  three caching solutions  Local persistence of source files, providing local and database support  Incremental update  Custom routing  Custom multi-station assembly API  A variety of template: every  Toapi  service can be installed by other users, you do not need to write code,    you can install other services, and then combined into their own services. \nOfficial maintenance of a template list - [awesome-toapi] (https://github.com/toapi/awesome-toapi)  Toapi  is an open source project written by  python , \nyou can customize if you hava special functional requirements.\nWe provide complete ecology for you:   project website:  https://github.com/gaojiuli/toapi  project organization (welcome to join us): https://github.com/toapi  doc website: http://www.toapi.org/",
            "title": "Brief Introduction"
        },
        {
            "location": "/articles/release/#use-toapi",
            "text": "Take a look at a simple example  below - just a demo \ntarget website is  hackernews \uff1a  from   toapi   import   XPath ,   Item ,   Api ,   Settings  class   MySettings ( Settings ): \n     web   =   { \n         \"with_ajax\" :   True , \n         \"request_config\" :   {}, \n         \"headers\" :   None \n     }  api   =   Api ( 'https://news.ycombinator.com' ,   settings = MySettings )  class   Post ( Item ): \n     url   =   XPath ( '//a[@class=\"storylink\"]/@href' ) \n     title   =   XPath ( '//a[@class=\"storylink\"]/text()' ) \n\n     class   Meta : \n         source   =   XPath ( '//tr[@class=\"athing\"]' ) \n         route   =   { '/news?p=:page' :   '/news?p=:page' }  class   Page ( Item ): \n     next_page   =   XPath ( '//a[@class=\"morelink\"]/@href' ) \n\n     class   Meta : \n         source   =   None \n         route   =   { '/news?p=:page' :   '/news?p=:page' } \n\n     def   clean_next_page ( self ,   next_page ): \n         return   \"http://127.0.0.1:5000/\"   +   next_page  api . register ( Page )  api . register ( Post )  api . serve ()  # Visit http://127.0.0.1:5000/news?p=1   Less than forty lines of code,\nyou have aleady have API service of  hackernews .\nIntroduce current templates provided by official:   toapi-search : Baidu, Bing, Google, Sogou aggregation API  toapi-one  API of One app  http://wufazhuce.com/  toapi-ebooks : API of IT e-book source  toapi-instagram : API of Instagram  https://www.instagram.com/  toapi-pic : API of HD photos website collection  e.g.",
            "title": "Use Toapi"
        },
        {
            "location": "/articles/release/#at-last",
            "text": "Toapi  will not stop making progress. \nFrom the primitive version of the first edition to the fully functional version now, \nwe have nearly 400 commits in a month, of which hard work is unnecessary to say.  We sincerely hope developer use  Toapi  to build server, \nand feedback your valuable opinion.   Getting started  Toapi  is a trivial matter and we would \nlike to see  Toapi  make a contribution \nto open source community, for you to reduce the trouble of building an API.  Toapi development team( @gaojiuli ,  @howie6879 ,  @wuqiangroy )",
            "title": "At last"
        }
    ]
}